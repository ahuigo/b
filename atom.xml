<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-05-21T20:50:54Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>php str</title>
<link href="/b/php/php-str" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># encoding
## internal encoding
mb_internal_encoding('UTF-8');
echo mb_internal_encoding();
ini_get(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2020-05-21T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2020-05-21T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>test</title>
<link href="/b/c/ops-benchmark" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2020-05-21T00:00:00Z</published>
<content># Preface

性能/压力测试的内涵：

	基准/基线测试 base line testing / benchmark testing
	负载测试 load testing
	压力测试 stre</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>哈希</title>
<link href="/b/algorithm/4.algo-hash" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2019-01-18T00:00:00Z</published>
<content>
# 哈希函数
1. key 均匀的落到不同的slots
2. key 本身不能影响到hash 的均匀性

## 散列法
### 取模法
hash = key mod m
1. m尽量用质数，不要用$</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 字典</title>
<link href="/b/py/py-var-dict" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2020-05-20T00:00:00Z</published>
<content># Dict

    key='city'
	dic = {'x': 1, 'y': 2, 2:100, key:'bj'}
	del dict['x']
    dict.pop(2) # key</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2020-05-20T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/service/ops-init" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd</title>
<link href="/b/c/service/init-systemd" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd
使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。

	$ systemctl -</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd 日志管理</title>
<link href="/b/c/service/init-systemd-log" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd 日志管理: journalctl
Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2020-05-18T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 的变量类型</title>
<link href="/b/nginx/nginx-var-env-str" rel="alternate" type="text/html"/>
<updated>2020-05-18T00:00:00Z</updated>
<summary/>
<published>2020-05-18T00:00:00Z</published>
<content># Variable
## set variable
Set variable's value:

	Syntax:	set $variable value;
	Default:	—
	Context</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

    基本 hjkl
    单词 
        小单词wbe
            w: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim 之 map命令</title>
<link href="/b/vim/vim-map" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Preface
map命令手册位于：

    :h map.txt

map 命令语法：

   map {lhs} {rhs}

# map command list - map 命令列表

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 终端使用技巧</title>
<link href="/b/c/shell-zsh" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Preface
本文总结了shell 终端的使用技术: 主要包括Readline 使用，以及zsh 与iTerm2 的使用

# Shortcuts
下面列出的快捷键大部分是通用的，有一小部分快捷</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2020-05-13T00:00:00Z</updated>
<summary/>
<published>2020-05-13T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2020-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 的变量类型</title>
<link href="/b/nginx/nginx-var" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2020-05-11T00:00:00Z</published>
<content># Variable
## set variable
Set variable's value:

	Syntax:	set $variable value;
	Default:	—
	Context</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

## 域名解析
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx location</title>
<link href="/b/nginx/nginx-router" rel="alternate" type="text/html"/>
<updated>2020-05-18T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx router
## location 路由语句块
location 是用于路由的. 默认路由 或者location 语句体为空，则直接去读静态资源

	Context: server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx proxy</title>
<link href="/b/nginx/nginx-proxy" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># http_proxy
The ngx_http_proxy_module module allows passing requests to another server.

## proxy_p</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>2</title>
<link href="/b/nginx/a." rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2020-05-11T00:00:00Z</published>
<content>a=2
if(nil) then
    print("0 为 true")
elseif(a==1) then
    print("3")
else
    print("4")
end
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>brew</title>
<link href="/b/mac/mac-brew" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># brew
- brew(Homebrew) 是近来极流行的 安装gawk,gsed,macvim等命令的安装工具，所有的包都被安装到/usr/local/Cellar下，然后再以`ln -s` 软</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 编程</title>
<link href="/b/c/shell-cmd" rel="alternate" type="text/html"/>
<updated>2020-05-13T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming
Shell 编程笔记

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2020-05-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
## throw any type
    throw "string"
    throw {message:"msg"}
    e = Error('msg')
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>install</title>
<link href="/b/nginx/nginx-install" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2020-05-20T00:00:00Z</published>
<content># install

    brew install openresty/brew/openresty

# start
如果想以非deamon 方式启动()：

    //nginx.conf
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx debug</title>
<link href="/b/nginx/nginx-debug-log" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2020-05-11T00:00:00Z</published>
<content># Preface

# log
## log scope

	main, http, server, location

## log type

	access_log /var/log/ngin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Lua 的变量</title>
<link href="/b/lua/lua-var" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2019-02-05T00:00:00Z</published>
<content># Lua 变量

## 数据类型

    nil	这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。
    boolean	包含两个值：false和true。
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>lua module</title>
<link href="/b/lua/lua-module" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2019-01-06T00:00:00Z</published>
<content># 定义module.lua

    -- 文件名为 mymath.lua
    local mymath =  {}

    -- 定义一个常量
    mymath.constant = "</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-lsof</title>
<link href="/b/c/ops-process-lsof" rel="alternate" type="text/html"/>
<updated>2020-05-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># lsof
[/p/linux-process-lsof](/p/linux-process-lsof)

List Open File. 比如查看所有打开file descriptor

    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-dns</title>
<link href="/b/net/net-dns" rel="alternate" type="text/html"/>
<updated>2020-05-02T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># DNS 简介
主机名.次级域名.顶级域名.根域名

  host.sld.tld.root

  A记录：服务器 IP
  AAAA：服务器 IPv6 的地址。
  CNAME记录： 你空间商给您</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/pg-crud" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre CRUD
## string or keyword
    select 'string';
    select "count"(1) from "table_name"

##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找数组中的第K大的值</title>
<link href="/b/algorithm/sort-topk-kth" rel="alternate" type="text/html"/>
<updated>2020-05-02T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 查找数组中的第K大的值

## 通过最大最小堆
时间复杂度 : $O(N \log k)$
空间复杂度 : $O(k)$，用于存储堆元素。

## QuickSelect(快速选择)
This i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>动态规划(Dynamic programing, DP)</title>
<link href="/b/algorithm/algo-dp" rel="alternate" type="text/html"/>
<updated>2020-05-02T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 动态规划(Dynamic programing, DP)
动态规则(Dynamic programing, DP) 的大体思路是(数学归纳法)：将一个特定的问题，切割成若干类似的子问题，最后合并子</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js dom 笔记</title>
<link href="/b/ria/js-dom" rel="alternate" type="text/html"/>
<updated>2020-04-28T00:00:00Z</updated>
<summary/>
<published>2016-01-23T00:00:00Z</published>
<content># Js dom 笔记
    document.documentElement ;//html
    document.body;  //html

# Device
## Navigator
n</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>html5 笔记</title>
<link href="/b/ria/js-dom-html5" rel="alternate" type="text/html"/>
<updated>2020-04-28T00:00:00Z</updated>
<summary/>
<published>2020-04-28T00:00:00Z</published>
<content># Tag

## Forms
属性

    enctype="multipart/form-data"
        default content-type: application/x-ww</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>浏览器同源政策及其规避方法</title>
<link href="/b/ria/js-cors" rel="alternate" type="text/html"/>
<updated>2020-04-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 浏览器同源政策及其规避方法
http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html
http://www.ruanyifeng</content>
</entry></feed>