<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-02-10T23:40:32Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>约瑟夫问题</title>
<link href="/b/algorithm/algo-dp-josephus-problem" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># 约瑟夫问题
[约瑟夫问题](https://en.wikipedia.org/wiki/Josephus_problem) 描述的是n 个士兵围一个环，从一个人开始计数，每次计数到k 杀掉一个人，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-gui</title>
<link href="/b/py/py-gui" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
Python支持多种图形界面的第三方库，包括：

1. Tk 自带
1. wxWidgets
1. Qt 超级跨平台
1. GTK
1. pysimplegui: https://</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl-tool</title>
<link href="/b/net/net-ssl-tool" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># mkcert
mkcert 是一个签发本地证书的工具，用于开发环境，最大特色是可以签发 localhost 的证书 (阮一峰博客看到的)
https://blog.filippo.io/mkcer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>book</title>
<link href="/b/idea/idea-book" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># Preface

# 人工智能
https://www.gitbook.com/book/yjango/superorganism/details

# code

## practice onl</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>git 使用之日志、数据恢复</title>
<link href="/b/git/git-log" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># 日志过滤

## by branch
1. `^` means not in
1. `A..B` means from A to B(exclude A)

	git log [repo/]bra</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>约瑟夫问题</title>
<link href="/b/algorithm/alog-dp-josephus-problem" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># 约瑟夫问题
[约瑟夫问题](https://en.wikipedia.org/wiki/Josephus_problem) 描述的是n 个士兵围一个环，从一个人开始计数，每次计数到k 杀掉一个人，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>加密算法简介</title>
<link href="/b/algorithm/algorithm-crypt" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 加密算法简介
本文是对常见加密算法的总结。
这里推荐一本加密算法入门书crypto101：https://www.crypto101.io/

# Symmetric-key Cryptograp</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>前缀、中缀、后缀表达式</title>
<link href="/b/algorithm/algo-prefix-postfix-expr" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-09T00:00:00Z</published>
<content># 前缀、中缀、后缀表达式
有三种表达式
1. 前缀prefix: + 3 * 5 6
2. 中缀infix: 3+5*6
3. 后缀postfix: 3 5 6 * +

对于人类来说，中缀宜读，对</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>求数列中和最大的连续子序列的和</title>
<link href="/b/algorithm/algo-dp-array-max-consecutive-sub" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-01-09T00:00:00Z</published>
<content># 求数列中和最大的连续子序列的和
&gt; Find max sum of consecutive sequence for an array.

## 问题
给定一个随机的数字序列，要求找出其中和最大的</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-02-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-test</title>
<link href="/b/py/py-test" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
test framework list:
- pytest   比unittest 好的一点是：可以选择测试范围
- unittest 单元测试, py-unittest
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python virtualenv</title>
<link href="/b/py/py-test-virtualenv" rel="alternate" type="text/html"/>
<updated>2019-02-08T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># virtualenv
本文介绍两种python 虚拟环境
- virtualenv 提供了 Python 虚拟环境的隔离，但是命令复杂，目录的管理也比较混乱，
- VirtualEnvWrappe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python shell 子进程</title>
<link href="/b/py/py-shell" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python shell 子进程
很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。

subprocess模块可以让我们非常方便地启动一个子进程，然</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-func</title>
<link href="/b/py/py-func" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

函数式编程

# call func
getattr(foo, 'bar')()
locals()['bar']()
globals()['bar']()

## access </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Type</title>
<link href="/b/java/java-var" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Type

## Type Convert

### int to string

　　int i = Integer.parseInt(str);
　　int i = Integer.parse</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2019-02-07T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>install java</title>
<link href="/b/java/java-install" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># install java

## jdk
jdk include jre(java run-time environment)

  sudo yum install java-1.8.0-ope</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Lua 的变量</title>
<link href="/b/arch/lua-var" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-02-05T00:00:00Z</published>
<content># Lua 变量

## 类型

    nil	这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。
    boolean	包含两个值：false和true。
  </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>lua module</title>
<link href="/b/arch/lua-module" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-01-06T00:00:00Z</published>
<content># 定义module

    -- 文件名为 module.lua
    -- 定义一个名为 module 的模块
    module = {}
    
    -- 定义一个常量
    m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-process</title>
<link href="/b/py/py-process" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
- sh: sh之于subprocess， 相当于requests 对于urllib2
	1. sh.ls("-l", "/tmp", color="never")
	2. sh.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>前端自动化测试</title>
<link href="/b/ria/js-test" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-02-06T00:00:00Z</published>
<content># 前端自动化测试
原文: http://fex.baidu.com/blog/2015/07/front-end-test/
前端自动化测试可以在几个方向进行尝试：

- 界面回归测试 测试界面是否</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 时间函数的用法笔记</title>
<link href="/b/py/py-time" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-04-02T00:00:00Z</published>
<content># time 工具
time 提供基本的时间，sleep

	import time
	time.time()
		19972314124.05238
        time.localetime(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python thread 线程笔记</title>
<link href="/b/py/py-thread" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-02-06T00:00:00Z</published>
<content># threading
Python的标准库提供了两个模块：`_thread`和`threading`: `_thread`是低级模块，threading是高级模块，对_thread进行了封装。

绝</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>profile</title>
<link href="/b/py/py-profiler" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># profile
- cProfile
类似于xdebug cachegrind profiler 性能画像
- py-spy python 版的top
    - py-spy --pid 123</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>asyncio</title>
<link href="/b/py/py-asyncio" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># asyncio
asyncio是基于coroutine 的，包括了:
1. 事件循环(event loop)
2. Task: 对coroutine 的封装，包含各种状态
    1. Pendi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 异步tcp</title>
<link href="/b/py/py-asyncio-http" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-02-06T00:00:00Z</published>
<content>有很多库支持async tcp:
1. asyncio 只是异步的tcp 框架
2. aiohttp 提供了对async http 的完整支持

# asyncio
tcp 访问实例: https:/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-async</title>
<link href="/b/py/py-async" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
本文参考:
1. Python黑魔法 --- 异步IO（ asyncio） 协程
http://www.jianshu.com/p/b5e347b3a17c
2. Python A</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-02-06T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>设置系统的PATH</title>
<link href="/b/c/ops-path" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2019-01-06T00:00:00Z</published>
<content>如果想在进入系统时设置PATH, 在这里设置
/etc/paths
/etc/profile
/etc/bashrc
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>IP</title>
<link href="/b/net/proxy/vps-goagent" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># IP security
webrtc会暴露自己的真实ips
https://diafygi.github.io/webrtc-ips/ 通过js webrtc 获取ip

禁用 WebRTC
ht</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux ssh tool</title>
<link href="/b/net/net-ssh-tool" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2016-09-09T00:00:00Z</published>
<content># Server
OpenSSH Installations under CentOS Linux

	# To install the server and client type:
	yum -y</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssh proxy</title>
<link href="/b/net/net-ssh-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># ssh proxy

    -f Rquests ssh to go to background just before command execution.

## socks proxy
&gt;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell proxy</title>
<link href="/b/net/net-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># Android
HowTo: Proxy Non-Proxy-Aware Android Applications through Burp
http://blog.dornea.nu/2014/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell Programming</title>
<link href="/b/c/shell-" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/chap37.html</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/ops-init" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-02-06T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>网络扫描器nmap、zmap</title>
<link href="/b/net/net-nmap-zmap" rel="alternate" type="text/html"/>
<updated>2019-02-04T00:00:00Z</updated>
<summary/>
<published>2016-10-10T00:00:00Z</published>
<content># nmap
常见的网络扫描器有 SSS，X-Scan，Superscan等，功能最强大的当然是[Nmap](http://www.aiezu.com/system/linux/linux_nmap_</content>
</entry></feed>