<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-07-13T11:14:57Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>nginx 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

upstream目</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/net/net-tcpip" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Notes: struct</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int}
    a:=A{}
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang string</title>
<link href="/b/go/9.go-str" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># string

## inner pointer
    + |pointer|len=5|       s="hello" 
          |         |
        + |h</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go time</title>
<link href="/b/go/19.go-time" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2019-07-13T00:00:00Z</published>
<content># tick and after

## timer/ticker, 定时器
`chan time.Time: timer.C = ticker.C`
定时器对象

    timer := time</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Pointers</title>
<link href="/b/go/13.go-pointer" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Pointers
1. 支持指针类型 *T,指针的指针 **T,以及包含包名前缀的 `*&lt;package&gt;.T`。
2. 不能对指针做加减法等运算。
3. 默认是`nil`, 没有`NULL`

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>FUNCTION</title>
<link href="/b/db/postgre-ddl" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># shell

## connect shell
默认同时支持 unix domain socket + ip/port net socket

    psql DBNAME USERNAME
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>GMT,UTC,DST,CST 各种时间标准</title>
<link href="/b/c/shell-time" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2012-07-08T00:00:00Z</published>
<content># 各世界时间标准
我们经常遇到这4种时间：GMT,UTC,DST,CST。google了一下，在此做个小结.

## 格林威治标准时间GMT
含义：「格林威治标准时间」(Greenwich Mean</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2019-07-13T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># shell
    psql DBNAME USERNAME
    psql -U user_name -d database_name -h 127.0.0.1 -W
    psql -U </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/postgre-crud" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre CRUD
## insert 
    CREATE TABLE users (id INT, counters JSONB NOT NULL DEFAULT '{}');
   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-admin" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
```bash
rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Gorm ddl</title>
<link href="/b/db/gorm-ddl" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Rollup 该支持HMR 吗?
Rollup 已经开始支持codesplit(要手动开启)，不过Rollup 本身至今还没有打算支持HMR(Hot Module Reload)。

我想主要原因</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>install</title>
<link href="/b/vim/nvim-install" rel="alternate" type="text/html"/>
<updated>2019-03-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># install
    brew install neovim
    nvim 
    :CheckHealth
    :scriptnames

## iterm2
iterm2 默认的 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>GMT,UTC,DST,CST 各种时间标准</title>
<link href="/b/c/shell-time" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2012-07-08T00:00:00Z</published>
<content># 各世界时间标准
我们经常遇到这4种时间：GMT,UTC,DST,CST。google了一下，在此做个小结.

## 格林威治标准时间GMT
含义：「格林威治标准时间」(Greenwich Mean</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>在家里如何免费使用中国知网？</title>
<link href="/b/course/paper" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># command

    npm list -g; # global
    npm list; # local
    npm dedupe -g; # Reduce duplication

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>收集了下UI 动画特效</title>
<link href="/b/ui/ui-animation" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># RPC
&gt; http://www.cnblogs.com/fxjwind/archive/2013/05/16/3082219.html
&gt; 深入浅出RPC原理
https://ketao1989</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

    var isFocused = (document.activeElement === dummyEl);
    ele.focus()

# FormData

## i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>server</title>
<link href="/b/py/py-aiohttp-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># server
异步编程要小心循环阻塞, 不可以使所有任务task被阻塞的函数：
1. time.sleep(10)

## simple server

    from aiohttp impo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Django Notes</title>
<link href="/b/py/django" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2019-03-11T00:00:00Z</published>
<content># Models
## raw sql

    &gt;&gt;&gt; lname = 'Doe'
    &gt;&gt;&gt; first_person = Person.objects.raw('SELECT * FROM </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>各种语言的fiddle</title>
<link href="/b/c/ops-fiddle" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-08-27T00:00:00Z</published>
<content># 各种语言的fiddle
各种语言的fiddle
1. js:
    https://ahuigo.github.io/a/demo/fiddle/fiddle.html # 加上`data:te</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>node 系统相关</title>
<link href="/b/ria/node-os" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># node 系统相关

    global.process === process 

## shell child process

    const execSync = require('</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># JS Promise
实现异步串行写法
1. generator
1. Promise: resove-then, reject-catch
2. async-await: 
    1. syn</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>webspider</title>
<link href="/b/py/py-webspider" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># webspider
Python 3网络爬虫开发实战 
https://germey.gitbooks.io/python3webspider/1.2.2-Selenium%E7%9A%84%E5</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-test</title>
<link href="/b/py/py-test" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
test framework list:
- pytest   比unittest 好的一点是：可以选择测试范围
- unittest 单元测试, py-unittest
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>metaclass</title>
<link href="/b/py/py-obj-meta" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># metaclass
通过元类，我们可以实例元类 创建类

## issue
python 解析class 时，会对参数(包括obj)做预处理。预处理的参数不再接受修改

    i = 1
   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx upstream, 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream, 负载均衡
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

ups</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Redis</title>
<link href="/b/db/redis-" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Redis
redis所有的数据都是redisObject存储的。redisObject来表示所有的key/value数据是比较浪费内存的(为了支持各种数据类型嘛)，还好redis 作者也考虑了很</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-server</title>
<link href="/b/py/py-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
参考：https://zhuanlan.zhihu.com/p/30056870

## CGI
原始的CGI 程序只是单纯的多进程fork 模式[/demo/py/socket-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># asyncio
asyncio是基于coroutine 的，包括了:
1. 事件循环(event loop)
2. Task: 对coroutine 的封装，包含各种状态
    1. Pendi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>does-a-thread-waiting-on-io-also-block-a-core?</title>
<link href="/b/py/py-async-cpu" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># does-a-thread-waiting-on-io-also-block-a-core
&gt; Refer to: https://stackoverflow.com/questions/3568</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c 语言之指针</title>
<link href="/b/c/c-pointer" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-07-05T00:00:00Z</published>
<content># Dict

    key='city'
	dic = {'x': 1, 'y': 2, 2:100, key:'bj'}
	del dict['x']
    dict.pop(2) # key</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c lib 库</title>
<link href="/b/c/c-lib" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
在[c 编译](/p/c-compile) 中我提到了c 的标准库，c标准库包括: header(.h 文件)头文件，和lib（.c）库文件。
大多数库函数在libc 中, 本笔记</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 之 编译</title>
<link href="/b/c/c-compile" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface

本文总结关于c 编译的基础用法: 宏，头文件

# include 头文件
公共的东西(External 声明，定义)，可以放到头文件中：`*.h`, 可以被多次引用（其实跟`.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    $ select st_force2d(geom) from table_name limit 100
    $ \d table_name
    id   </content>
</entry></feed>