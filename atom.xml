<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-05-28T19:34:00Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>vim 笔记</title>
<link href="/b/vim/vim-notes" rel="alternate" type="text/html"/>
<updated>2019-05-28T00:00:00Z</updated>
<summary/>
<published>2019-05-28T00:00:00Z</published>
<content># vim 笔记
本文是vim 相关的总结，不会有太多的注释 —— 只是方便回顾.

&gt; 使用vim 时建议将key repeat调到最快, 把key delay调到最小
&gt; 很多时候我会用Ctrl+</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2019-05-28T00:00:00Z</updated>
<summary/>
<published>2019-05-28T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

## move cursor光标移动
以下归纳的是按光标移动(Normal/Visual模式下). </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ajax cors</title>
<link href="/b/ria/js-ajax-cors" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ajax cors

## 请求分类
浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。
只要同时满足以下两大条件，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2019-05-27T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2019-05-27T00:00:00Z</published>
<content># Object

## isEempty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Objec</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
    try {
        r1 = s.length; // 此处应产生错误
        r2 = 100; // 该语句不会执行
         throw </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>react framework</title>
<link href="/b/ria/react-framework" rel="alternate" type="text/html"/>
<updated>2019-05-24T00:00:00Z</updated>
<summary/>
<published>2019-05-23T00:00:00Z</published>
<content># 前端框架优化方案
本文是对目前所使用前端框架的梳理、优化。

本文优化目标是：
1. 第一目标：更好的业务开发效率
    1. KISS原则: 保持简洁、统一
       1. 统一编码风格：</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符串搜索算法KMP</title>
<link href="/b/algorithm/algo-str-search" rel="alternate" type="text/html"/>
<updated>2019-05-24T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># 字符串搜索算法KMP
容易想到的搜索算法是O(N*M)
KMP 则是O(N) 复杂度

搜索`ahuigo` 时，当匹配到`,`, 我们可以跳过`ahui`

    ahui, let's go</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>FUNCTION</title>
<link href="/b/db/postgre-ddl" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># shell
    psql DBNAME USERNAME
    psql -U user_name -d database_name -h 127.0.0.1 -W
    psql -U </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/postgre-crud" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre CRUD
## insert 
    CREATE TABLE users (id INT, counters JSONB NOT NULL DEFAULT '{}');
   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-admin" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
```bash
rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Rollup 该支持HMR 吗?</title>
<link href="/b/ria/js-rollup-hmr" rel="alternate" type="text/html"/>
<updated>2019-03-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Rollup 该支持HMR 吗?
Rollup 已经开始支持codesplit(要手动开启)，不过Rollup 本身至今还没有打算支持HMR(Hot Module Reload)。

我想主要原因</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>install</title>
<link href="/b/vim/nvim-install" rel="alternate" type="text/html"/>
<updated>2019-03-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># install
    brew install neovim
    nvim 
    :CheckHealth
    :scriptnames

## iterm2
iterm2 默认的 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>GMT,UTC,DST,CST 各种时间标准</title>
<link href="/b/c/shell-time" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2012-07-08T00:00:00Z</published>
<content># 各世界时间标准
我们经常遇到这4种时间：GMT,UTC,DST,CST。google了一下，在此做个小结.

## 格林威治标准时间GMT
含义：「格林威治标准时间」(Greenwich Mean</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>command</title>
<link href="/b/ria/node-npm" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># command

    npm list -g; # global
    npm list; # local
    npm dedupe -g; # Reduce duplication

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>rpc</title>
<link href="/b/rpc/rpc" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># RPC
&gt; http://www.cnblogs.com/fxjwind/archive/2013/05/16/3082219.html
&gt; 深入浅出RPC原理
https://ketao1989</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>server</title>
<link href="/b/py/py-aiohttp-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># server
异步编程要小心循环阻塞, 不可以使所有任务task被阻塞的函数：
1. time.sleep(10)

## simple server

    from aiohttp impo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Django Notes</title>
<link href="/b/py/django" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2019-03-11T00:00:00Z</published>
<content># Models
## raw sql

    &gt;&gt;&gt; lname = 'Doe'
    &gt;&gt;&gt; first_person = Person.objects.raw('SELECT * FROM </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>各种语言的fiddle</title>
<link href="/b/c/ops-fiddle" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-08-27T00:00:00Z</published>
<content># 各种语言的fiddle
各种语言的fiddle
1. js:
    https://ahuigo.github.io/a/demo/fiddle/fiddle.html # 加上`data:te</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>node 系统相关</title>
<link href="/b/ria/node-os" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># node 系统相关

    global.process === process 

## shell child process

    const execSync = require('</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># JS Promise
实现异步串行写法
1. generator
1. Promise: resolve-then, reject-catch
2. async-await: 
    1. sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>webspider</title>
<link href="/b/py/py-webspider" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># webspider
Python 3网络爬虫开发实战 
https://germey.gitbooks.io/python3webspider/1.2.2-Selenium%E7%9A%84%E5</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-test</title>
<link href="/b/py/py-test" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
test framework list:
- pytest   比unittest 好的一点是：可以选择测试范围
- unittest 单元测试, py-unittest
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>metaclass</title>
<link href="/b/py/py-obj-meta" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># metaclass
通过元类，我们可以实例元类 创建类

## issue
python 解析class 时，会对参数(包括obj)做预处理。预处理的参数不再接受修改

    i = 1
   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx upstream, 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream, 负载均衡
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

ups</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Redis</title>
<link href="/b/db/redis-" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Redis
redis所有的数据都是redisObject存储的。redisObject来表示所有的key/value数据是比较浪费内存的(为了支持各种数据类型嘛)，还好redis 作者也考虑了很</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-server</title>
<link href="/b/py/py-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
参考：https://zhuanlan.zhihu.com/p/30056870

## CGI
原始的CGI 程序只是单纯的多进程fork 模式[/demo/py/socket-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>asyncio</title>
<link href="/b/py/py-asyncio" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># asyncio
asyncio是基于coroutine 的，包括了:
1. 事件循环(event loop)
2. Task: 对coroutine 的封装，包含各种状态
    1. Pendi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>does-a-thread-waiting-on-io-also-block-a-core?</title>
<link href="/b/py/py-async-cpu" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># does-a-thread-waiting-on-io-also-block-a-core
&gt; Refer to: https://stackoverflow.com/questions/3568</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c 语言之指针</title>
<link href="/b/c/c-pointer" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
关于指针有两种运算符：*号是指针间接寻址运算符（Indirection Operator），*pi表示取指针pi所指向的变量的值，也称为Dereference操作. &amp;运算符的操作</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c lib 库</title>
<link href="/b/c/c-lib" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
在[c 编译](/p/c-compile) 中我提到了c 的标准库，c标准库包括: header(.h 文件)头文件，和lib（.c）库文件。
大多数库函数在libc 中, 本笔记</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 之 编译</title>
<link href="/b/c/c-compile" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface

本文总结关于c 编译的基础用法: 宏，头文件

# include 头文件
公共的东西(External 声明，定义)，可以放到头文件中：`*.h`, 可以被多次引用（其实跟`.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-05-12T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry></feed>