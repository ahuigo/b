<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-05-26T13:33:44Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>vim-pattern</title>
<link href="/b/vim/vim-pattern" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# pattern

	:h pattern

## charlist
Character classes

	\s	whitespace character: &lt;Space&gt; </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的正则表达式</title>
<link href="/b/py/py-str-regex" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2020-05-26T00:00:00Z</published>
<content># regex 语法

	import re
    re.compile(pattern, [,modifier]).match(str)
    re.match(pattern, str[, m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx security</title>
<link href="/b/nginx/nginx-sec" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2020-05-24T00:00:00Z</published>
<content># Preface

# Todo
http://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html

## res</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int; b string}
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go log</title>
<link href="/b/go/go-log" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-09-21T00:00:00Z</published>
<content># zap log
Refer: https://studygolang.com/articles/17394

## Sugar Logger
sugar log 支持任意的类型(基于reflect</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/go-array-slice" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/7.go-var" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># Variables
The var statement declares a list of variables

	var c, python, java bool
	var i int
	fm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>filepath</title>
<link href="/b/go/12.go-file" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># dirpath

## pathinfo
extinfo 

    import "path/filepath"
    fileext := filepath.Ext(filename)

a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Posix Regex 正则语法</title>
<link href="/b/code/code-regex" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-08-18T00:00:00Z</published>
<content># Wildcard 通配符 和 Posix 正则
正则分两大类:Posix和PCRE(Perl Compatible Regular Expression ). posix 已经很老了, 效率也没有</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>php str</title>
<link href="/b/php/php-str" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># encoding
## internal encoding
mb_internal_encoding('UTF-8');
echo mb_internal_encoding();
ini_get(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2020-05-21T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2020-05-21T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>test</title>
<link href="/b/c/ops-benchmark" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2020-05-26T00:00:00Z</published>
<content># Preface

性能/压力测试的内涵：

	基准/基线测试 base line testing / benchmark testing
	负载测试 load testing
	压力测试 stre</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>哈希</title>
<link href="/b/algorithm/4.algo-hash" rel="alternate" type="text/html"/>
<updated>2020-05-21T00:00:00Z</updated>
<summary/>
<published>2019-01-18T00:00:00Z</published>
<content>
# 哈希函数
1. key 均匀的落到不同的slots
2. key 本身不能影响到hash 的均匀性

## 散列法
### 取模法
hash = key mod m
1. m尽量用质数，不要用$</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 字典</title>
<link href="/b/py/py-var-dict" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2020-05-20T00:00:00Z</published>
<content># Dict

    key='city'
	dic = {'x': 1, 'y': 2, 2:100, key:'bj'}
	del dict['x']
    dict.pop(2) # key</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2020-05-20T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/service/ops-init" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd</title>
<link href="/b/c/service/init-systemd" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd
使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。

	$ systemctl -</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd 日志管理</title>
<link href="/b/c/service/init-systemd-log" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd 日志管理: journalctl
Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 的变量类型</title>
<link href="/b/nginx/nginx-var-env-str" rel="alternate" type="text/html"/>
<updated>2020-05-18T00:00:00Z</updated>
<summary/>
<published>2020-05-18T00:00:00Z</published>
<content># Variable
## set variable
Set variable's value:

	Syntax:	set $variable value;
	Default:	—
	Context</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

    基本 hjkl
    单词 
        小单词wbe
            w: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim 之 map命令</title>
<link href="/b/vim/vim-map" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Preface
map命令手册位于：

    :h map.txt

map 命令语法：

   map {lhs} {rhs}

# map command list - map 命令列表

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 终端使用技巧</title>
<link href="/b/c/shell-zsh" rel="alternate" type="text/html"/>
<updated>2020-05-15T00:00:00Z</updated>
<summary/>
<published>2020-05-15T00:00:00Z</published>
<content># Preface
本文总结了shell 终端的使用技术: 主要包括Readline 使用，以及zsh 与iTerm2 的使用

# Shortcuts
下面列出的快捷键大部分是通用的，有一小部分快捷</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2020-05-13T00:00:00Z</updated>
<summary/>
<published>2020-05-13T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2020-05-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 的变量类型</title>
<link href="/b/nginx/nginx-var" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2020-05-11T00:00:00Z</published>
<content># Variable
## set variable
Set variable's value:

	Syntax:	set $variable value;
	Default:	—
	Context</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

## 域名解析
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx location</title>
<link href="/b/nginx/nginx-router" rel="alternate" type="text/html"/>
<updated>2020-05-18T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx router
## location 路由语句块
location 是用于路由的. 默认路由 或者location 语句体为空，则直接去读静态资源

	Context: server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx proxy</title>
<link href="/b/nginx/nginx-proxy" rel="alternate" type="text/html"/>
<updated>2020-05-20T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># http_proxy
The ngx_http_proxy_module module allows passing requests to another server.

## proxy_p</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>2</title>
<link href="/b/nginx/a." rel="alternate" type="text/html"/>
<updated>2020-05-11T00:00:00Z</updated>
<summary/>
<published>2020-05-11T00:00:00Z</published>
<content>a=2
if(nil) then
    print("0 为 true")
elseif(a==1) then
    print("3")
else
    print("4")
end
</content>
</entry></feed>