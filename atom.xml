<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-02-14T03:25:45Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>BFPRT 算法</title>
<link href="/b/algorithm/sort-topk" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># Topk 算法之BFPRT算法
基于最大/小堆的TopK 算法复杂度为 $O(n\log n)$

其实还有O(n)的算法 —— BFPRT 基于减治法，采用类似二分法的快排分区减低复杂度。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找数组中的中值</title>
<link href="/b/algorithm/sort-topk-kth" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 查找数组中的中值
This is a question about find k'th number in an array.

    def find_kth(arr, k):
       </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>android 刷包工具</title>
<link href="/b/net/net-sniffer-android" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-13T00:00:00Z</published>
<content># android 刷包工具
1. tPacketCapture: uses the Android VPN service to intercept packets and capture them</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>combination</title>
<link href="/b/math/math-probability" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># probility
德摩根定律: $(A\cup B)^{C}=A^{C}\cap B^{C}$

概率计算总结
1. 非A	$P(A^{c})=1-P(A)$
2. A或B	$P(A\cup B</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数学运算符</title>
<link href="/b/math/math-num-operator" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 数学运算符
Exponentiation

    a^x读作“a的x次方”或“a的n次幂“。

Power function

    x^n

对数是幂运算的逆运算

## Logarithm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>rime 鼠须管输入法</title>
<link href="/b/mac/mac-rime" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># Preface
# todo
diy 处方

設定項速查手冊

# 输入方案定制说明
所有的输入方案都是以`*.schema.yaml`命名的,比如: `wubi_pinyin.schema.ya</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 切换到自带的双拼方案</title>
<link href="/b/mac/mac-inputmethod-pinyin" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-13T00:00:00Z</published>
<content># mac 切换到自带的双拼方案
用了10多年的五笔后，还是受不了打字要停顿，于是换回mac 自带的双拼方案（我选择的是小鹅双拼）10.14.2 已经支持了。

开启了一下功能：
1. 小额双拼
2.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux perf(系统性能分析)</title>
<link href="/b/c/ops-perf" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># perf
从2.6.31内核开始，linux内核自带了一个性能分析工具perf，能够进行函数级与指令级的热点查找。

http://blog.csdn.net/zhangskd/article/d</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>经典排序算法的实现</title>
<link href="/b/algorithm/sort" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2013-09-26T00:00:00Z</published>
<content># 经典排序算法实现
常规的几种排序算法, 参考[维基sort](http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找数组中的中值</title>
<link href="/b/algorithm/sort-kth" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 查找数组中的中值
This is a question about find k'th number in an array.

    def find_kth(arr, k):
       </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Analysis of Algorithm</title>
<link href="/b/algorithm/1.time-complex" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2018-09-15T00:00:00Z</published>
<content># Analysis of Algorithm
本文整理下算法的分析方法

##  O/Omega/Thelta 的定义
$Ο$，读音：big-oh、欧米可荣（大写）；表示上界(tightness u</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数字的分类</title>
<link href="/b/math/math-num" rel="alternate" type="text/html"/>
<updated>2019-02-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 数字的分类
- 实数: x 的整数部分[x], 小数部分{x}
    - 整数, Integer: ℕ
        - 正整数, positive:
    - 有理无理:
        </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>哈希</title>
<link href="/b/algorithm/4.algo-hash" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-01-18T00:00:00Z</published>
<content>
# 哈希函数
1. key 均匀的落到不同的slots
2. key 本身不能影响到hash 的均匀性

## 散列法
### 取模法
hash = key mod m
1. m尽量用质数，不要用$</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Fibonacii and gold(φ)</title>
<link href="/b/math/math-num-fibonacii" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Fibonacii and gold(φ)
Fibonacii/gold 有很多有趣的性质
1. 广义fibonacii 逼近gold 的证明 寻找相邻两项之比不趋于 1.618 的广义 Fibo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Trie 树</title>
<link href="/b/algorithm/tree-trie" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># Trie 树
通过Trie 建立字典索引（空间为代价）

abc","ab","bd","dda" 建立索引：

    a
        b-&gt;ab
            c-&gt;abc
  </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>trie-filter</title>
<link href="/b/algorithm/tree-trie-filter" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># trie-filter

# php word filter
https://github.com/wulijun/php-ext-trie-filter</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉堆</title>
<link href="/b/algorithm/tree-binheap" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2019-02-11T00:00:00Z</published>
<content>https://github.com/bnmnetp/pythonds/blob/master/trees/binheap.py 给了一个最小堆的例子
1. 插入过程是一个向上冒泡pearUp 的过程</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2019-02-13T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据结构之树</title>
<link href="/b/algorithm/tree-" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 数据结构之树

树状图是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：

1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>动态规划(Dynamic programing, DP)</title>
<link href="/b/algorithm/algorithm-dp" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 动态规划(Dynamic programing, DP)
动态规则(Dynamic programing, DP) 的大体思路是：将一个特定的问题，切割成若干类似的子问题，最后合并子问题的解并得出</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>经典排序算法的实现</title>
<link href="/b/algorithm/algo-sort" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2013-09-26T00:00:00Z</published>
<content># 经典排序算法实现
常规的几种排序算法, 参考[维基sort](http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>约瑟夫问题</title>
<link href="/b/algorithm/algo-dp-josephus-problem" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># 约瑟夫问题
[约瑟夫问题](https://en.wikipedia.org/wiki/Josephus_problem) 描述的是n 个士兵围一个环，从一个人开始计数，每次计数到k 杀掉一个人，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-gui</title>
<link href="/b/py/py-gui" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
Python支持多种图形界面的第三方库，包括：

1. Tk 自带
1. wxWidgets
1. Qt 超级跨平台
1. GTK
1. pysimplegui: https://</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl-tool</title>
<link href="/b/net/net-ssl-tool" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># mkcert
mkcert 是一个签发本地证书的工具，用于开发环境，最大特色是可以签发 localhost 的证书 (阮一峰博客看到的)
https://blog.filippo.io/mkcer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>book</title>
<link href="/b/idea/idea-book" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># Preface

# 人工智能
https://www.gitbook.com/book/yjango/superorganism/details

# code

## practice onl</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>git 使用之日志、数据恢复</title>
<link href="/b/git/git-log" rel="alternate" type="text/html"/>
<updated>2019-02-13T00:00:00Z</updated>
<summary/>
<published>2019-02-13T00:00:00Z</published>
<content># 日志过滤

## by branch
1. `^` means not in
1. `A..B` means from A to B(exclude A)

	git log [repo/]bra</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>约瑟夫问题</title>
<link href="/b/algorithm/alog-dp-josephus-problem" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-02-10T00:00:00Z</published>
<content># 约瑟夫问题
[约瑟夫问题](https://en.wikipedia.org/wiki/Josephus_problem) 描述的是n 个士兵围一个环，从一个人开始计数，每次计数到k 杀掉一个人，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>加密算法简介</title>
<link href="/b/algorithm/algorithm-crypt" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 加密算法简介
本文是对常见加密算法的总结。
这里推荐一本加密算法入门书crypto101：https://www.crypto101.io/

# Symmetric-key Cryptograp</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>前缀、中缀、后缀表达式</title>
<link href="/b/algorithm/algo-prefix-postfix-expr" rel="alternate" type="text/html"/>
<updated>2019-02-11T00:00:00Z</updated>
<summary/>
<published>2019-02-09T00:00:00Z</published>
<content># 前缀、中缀、后缀表达式
有三种表达式
1. 前缀prefix: + 3 * 5 6
2. 中缀infix: 3+5*6
3. 后缀postfix: 3 5 6 * +

对于人类来说，中缀宜读，对</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>求数列中和最大的连续子序列的和</title>
<link href="/b/algorithm/algo-dp-array-max-consecutive-sub" rel="alternate" type="text/html"/>
<updated>2019-02-10T00:00:00Z</updated>
<summary/>
<published>2019-01-09T00:00:00Z</published>
<content># 求数列中和最大的连续子序列的和
&gt; Find max sum of consecutive sequence for an array.

## 问题
给定一个随机的数字序列，要求找出其中和最大的</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-02-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-test</title>
<link href="/b/py/py-test" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
test framework list:
- pytest   比unittest 好的一点是：可以选择测试范围
- unittest 单元测试, py-unittest
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python virtualenv</title>
<link href="/b/py/py-test-virtualenv" rel="alternate" type="text/html"/>
<updated>2019-02-08T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># virtualenv
本文介绍两种python 虚拟环境
- virtualenv 提供了 Python 虚拟环境的隔离，但是命令复杂，目录的管理也比较混乱，
- VirtualEnvWrappe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python shell 子进程</title>
<link href="/b/py/py-shell" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python shell 子进程
很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。

subprocess模块可以让我们非常方便地启动一个子进程，然</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-func</title>
<link href="/b/py/py-func" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

函数式编程

# call func
getattr(foo, 'bar')()
locals()['bar']()
globals()['bar']()

## access </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Type</title>
<link href="/b/java/java-var" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Type

## Type Convert

### int to string

　　int i = Integer.parseInt(str);
　　int i = Integer.parse</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-02-07T00:00:00Z</updated>
<summary/>
<published>2019-02-07T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry></feed>