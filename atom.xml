<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-06-23T17:14:32Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>flask route request response</title>
<link href="/b/py/flask/2.flask-route" rel="alternate" type="text/html"/>
<updated>2020-06-20T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># flask route request response
1. @app.tearup_appcontex
1. @app.route()
1. @app.teardown_appcontex

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>压测工具</title>
<link href="/b/c/ops-benchmark" rel="alternate" type="text/html"/>
<updated>2020-06-20T00:00:00Z</updated>
<summary/>
<published>2020-06-20T00:00:00Z</published>
<content># Preface
性能/压力测试的分类：

	基准/基线测试 base line testing / benchmark testing
	负载测试 load testing
	压力测试 stres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2020-06-18T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># promise 执行顺序
macrotasks: setTimeout, setInterval, setImmediate, I/O, UI rendering
microtasks: proc</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python virtualenv</title>
<link href="/b/py/py-test-virtualenv" rel="alternate" type="text/html"/>
<updated>2020-06-18T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python env
本文介绍数种python 虚拟环境
- virtualenv 提供了 Python 虚拟环境的隔离，但是命令复杂，目录的管理也比较混乱，
- VirtualEnvWrappe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>wireshark</title>
<link href="/b/net/net-sniffer-wireshark" rel="alternate" type="text/html"/>
<updated>2020-06-18T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># wireshark
Refer : http://www.bo56.com/tcpdump-%E5%92%8C-wireshark%E7%BB%84%E5%90%88%E6%8B%B3%EF%BC</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/pg-crud" rel="alternate" type="text/html"/>
<updated>2020-06-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre meta
## string or keyword
    select 'string';
    select "count"(1) from "table_name"

##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2020-06-16T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python thread 线程笔记</title>
<link href="/b/py/py-thread" rel="alternate" type="text/html"/>
<updated>2020-06-23T00:00:00Z</updated>
<summary/>
<published>2018-09-20T00:00:00Z</published>
<content># threading
Python的标准库提供了两个模块：`_thread`和`threading`: `_thread`是低级模块，threading是高级模块，对_thread进行了封装。

绝</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2020-06-16T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Sed 简记</title>
<link href="/b/c/ops-sed" rel="alternate" type="text/html"/>
<updated>2020-06-16T00:00:00Z</updated>
<summary/>
<published>2020-06-16T00:00:00Z</published>
<content># sed 与gsed
grep 与sed 同样是以按行匹配，不过sed 不仅能按行匹配，还能替换字符

&gt;ps: mac 下的sed与linux下的gnu sed有很大的不同，建议安装gsed（如果</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>TS ignore type when import module</title>
<link href="/b/ria/ts/ts-ignore" rel="alternate" type="text/html"/>
<updated>2020-06-09T00:00:00Z</updated>
<summary/>
<published>2020-01-14T00:00:00Z</published>
<content># TS ignore
对于tsline来说用 `/* tslint:disable-next-line */`

如果想让tsc 忽略下一行的错误

    // @ts-ignore
    im</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/css-layout" rel="alternate" type="text/html"/>
<updated>2020-06-16T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># 参考
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a blo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2020-06-09T00:00:00Z</updated>
<summary/>
<published>2020-06-09T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx debug</title>
<link href="/b/nginx/nginx-debug-log" rel="alternate" type="text/html"/>
<updated>2020-06-08T00:00:00Z</updated>
<summary/>
<published>2020-06-08T00:00:00Z</published>
<content># Preface

# log
## log scope

	main, http, server, location

## log type

	access_log /var/log/ngin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2020-06-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js 字符串大全</title>
<link href="/b/ria/js-str" rel="alternate" type="text/html"/>
<updated>2020-06-06T00:00:00Z</updated>
<summary/>
<published>2015-03-15T00:00:00Z</published>
<content># Js 字符串大全
字符定义与python 一样, 而且不区分双引号：

    '\x00' == '\u0000'
	'\x31' == "\x31"

	'好' === '\u597D' //</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>grep &amp; ag 的使用</title>
<link href="/b/c/shell-grep" rel="alternate" type="text/html"/>
<updated>2020-06-06T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># grep &amp; ag 的使用
# ag
ag 比ack/grep 还快

    brew install the_silver_searcher

## 自动忽略`.gitinore/.hgign</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx location</title>
<link href="/b/nginx/nginx-router" rel="alternate" type="text/html"/>
<updated>2020-06-08T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx router
## location 路由语句块
location 是用于路由的. 默认路由 或者location 语句体为空，则直接去读静态资源

	Context: server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx proxy</title>
<link href="/b/nginx/nginx-proxy" rel="alternate" type="text/html"/>
<updated>2020-05-31T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># http_proxy
The ngx_http_proxy_module module allows passing requests to another server.

## proxy_p</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg 开发包</title>
<link href="/b/go/go-pkg-dev" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># golang write mod package
&gt; 下面的例子我放在了：https://github.com/ahuigo/go-lib/tree/master/import-local-mod</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-test</title>
<link href="/b/go/15.go-test" rel="alternate" type="text/html"/>
<updated>2020-06-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
Go has a lightweight test framework composed of the go test command and the testing packag</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre User and Authentication</title>
<link href="/b/db/pg-ddl-user" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help
    \h alter
    ALTER ROLE name RENAME TO new_name

# Postgre User and Authentication
找到pg_h</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/pg-ddl-install" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理

## intall
centos:

    yum install postgresql-server postgresql-contrib -y
    s</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 索引</title>
<link href="/b/db/mysql-index" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2020-05-29T00:00:00Z</published>
<content># Index Type
&gt; http://stackoverflow.com/questions/12813363/what-is-the-difference-between-a-candidat</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/shell-var" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-pattern</title>
<link href="/b/vim/vim-pattern" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# pattern

	:h pattern

## charlist
Character classes

	\s	whitespace character: &lt;Space&gt; </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的正则表达式</title>
<link href="/b/py/py-str-regex" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2020-05-26T00:00:00Z</published>
<content># regex 语法

	import re
    re.compile(pattern, [,modifier]).match(str)
    re.match(pattern, str[, m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2020-05-26T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx security</title>
<link href="/b/nginx/nginx-sec" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2020-05-24T00:00:00Z</published>
<content># Preface

# Todo
http://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html

## res</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int; b string}
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go log</title>
<link href="/b/go/go-log" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-09-21T00:00:00Z</published>
<content># zap log
Refer: https://studygolang.com/articles/17394

## Sugar Logger
sugar log 支持任意的类型(基于reflect</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/go-array-slice" rel="alternate" type="text/html"/>
<updated>2020-05-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/7.go-var" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># Variables
The var statement declares a list of variables

	var c, python, java bool
	var i int
	fm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>filepath</title>
<link href="/b/go/12.go-file" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># dirpath

## pathinfo
extinfo 

    import "path/filepath"
    fileext := filepath.Ext(filename)

a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Posix Regex 正则语法</title>
<link href="/b/code/code-regex" rel="alternate" type="text/html"/>
<updated>2020-05-24T00:00:00Z</updated>
<summary/>
<published>2018-08-18T00:00:00Z</published>
<content># Wildcard 通配符 和 Posix 正则
正则分两大类:Posix和PCRE(Perl Compatible Regular Expression ). posix 已经很老了, 效率也没有</content>
</entry></feed>