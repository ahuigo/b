<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-07-19T01:58:46Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/css-layout" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># 参考
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a blo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines</title>
<link href="/b/go/go-routines" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># go routines
A goroutine is a `lightweight thread` managed by the Go runtime.

execution of f happe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines 与原子</title>
<link href="/b/go/go-routines-atom" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2020-07-18T00:00:00Z</published>
<content># golang 原子问题

## 问题发现的过程
字节的同学在[踩坑记： Go 服务灵异 panic](v2ex.com/t/691145)提到，json 序列化字符串经常遇到 nil addres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Interfaces</title>
<link href="/b/go/16.go-interface" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Interfaces
Interface：
1. Interface 可以用来模拟泛型，但是是运行时模拟，没有编译时快
1. method 没有 public protecte..., 如果要被其</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-ps</title>
<link href="/b/c/ops-process-ps" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# processe status
linux上进程有5种状态:

1. 运行(正在运行或在运行队列中等待)
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)
3</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2020-07-19T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 简介</title>
<link href="/b/c/c-var" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2020-07-19T00:00:00Z</published>
<content># Preface

# todo
linux c
http://blog.xiayf.cn/slides/tlpi-1/index.html#/2

# Variable

## Int

	sig</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx的ssl配置</title>
<link href="/b/nginx/nginx-ssl" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx ssl配置
参考[](/p/net/net-ssl) and [nginx_https]

	server {
		listen 80;
		listen 443 default_se</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int; b string}
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 指针</title>
<link href="/b/go/13.go-pointer" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Pointers
1. 支持指针类型 *T,指针的指针 **T,以及包含包名前缀的 `*&lt;package&gt;.T`。
2. 不能对指针做加减法等运算。
3. 默认是`nil`, 没有`NULL`

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Start Golang</title>
<link href="/b/go/0.go-book" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2016-06-19T00:00:00Z</published>
<content># Start golang
1. start
https://tour.golang.org/basics/5
1. https://go101.org/article/101.html
1. sp</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx security</title>
<link href="/b/nginx/nginx-sec" rel="alternate" type="text/html"/>
<updated>2020-07-10T00:00:00Z</updated>
<summary/>
<published>2020-07-10T00:00:00Z</published>
<content># Preface

# Todo
http://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html

## res</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>系统调用</title>
<link href="/b/go/go-shell" rel="alternate" type="text/html"/>
<updated>2020-07-10T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 系统调用
Go语言主要是通过两个包完成的。一个是os包，一个是syscall包

1. syscall 里提供了什么Chroot/Chmod/Chmod/Chdir…，Getenv/Getgid/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>awk 简介</title>
<link href="/b/c/ops-awk" rel="alternate" type="text/html"/>
<updated>2020-07-10T00:00:00Z</updated>
<summary/>
<published>2020-07-10T00:00:00Z</published>
<content># Preface
awk  命令行的基本语法为

	awk option 'script' file1 file2 ...
	awk option -f scriptfile file1 file2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang 的filepath api</title>
<link href="/b/go/go-file" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># dirpath

## pathinfo
extinfo 

    import "path/filepath"
    fileext :=copy filepath.Ext(filename</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/go-array-slice" rel="alternate" type="text/html"/>
<updated>2020-07-15T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang notes: argv</title>
<link href="/b/go/go-argv" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2019-03-25T00:00:00Z</published>
<content># Golang notes: argv

    os.Args []string返回命令⾏行参数，
    os.Exit 终⽌止进程。 
    filepath.Abs(exec.LookPa</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go expression</title>
<link href="/b/go/8.go-expr" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># if
  if x &lt; 0 {
	}

## if error
    if i, err := strconv.Atoi("123"); err==nil{
        println(i)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines</title>
<link href="/b/go/18.go-routines" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># go routines
A goroutine is a `lightweight thread` managed by the Go runtime.

execution of f happe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>GMT,UTC,DST,CST 各种时间标准</title>
<link href="/b/c/shell-time" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2012-07-08T00:00:00Z</published>
<content># 各世界时间标准
我们经常遇到这4种时间：GMT,UTC,DST,CST。google了一下，在此做个小结.

## 格林威治标准时间GMT
含义：「格林威治标准时间」(Greenwich Mean</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/service/ops-init" rel="alternate" type="text/html"/>
<updated>2020-07-09T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2020-07-04T00:00:00Z</updated>
<summary/>
<published>2020-07-04T00:00:00Z</published>
<content># Object

## isEmpty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Object</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的list/tuple 笔记</title>
<link href="/b/py/py-var-list" rel="alternate" type="text/html"/>
<updated>2020-07-04T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># list and tuple
因为tuple 是增加删除元素的不可变的list(数据可以变)，所以代码更安全。
如果可能，能用tuple代替list就尽量用tuple。

	list = [1,2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>proxy 之charles</title>
<link href="/b/net/proxy/proxy-charles" rel="alternate" type="text/html"/>
<updated>2020-07-04T00:00:00Z</updated>
<summary/>
<published>2020-07-04T00:00:00Z</published>
<content># Charles
## delete

	Cmd+del delete all session
	Shift+Cmd+P Mac OS proxy

## Map Remote/Local
### </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2020-07-04T00:00:00Z</updated>
<summary/>
<published>2018-10-08T00:00:00Z</published>
<content># Variable

	let num++
	let ++num

	declare -i num
	num+=1

	((num++))

## unset export
    unset FO</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2020-07-01T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-import</title>
<link href="/b/py/py-import" rel="alternate" type="text/html"/>
<updated>2020-07-01T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

## package vs module
import pkg/modules 时，引入的object type 是`module`，但它们不同点是
1. `pkg/__init</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>About Http</title>
<link href="/b/net/http" rel="alternate" type="text/html"/>
<updated>2020-07-01T00:00:00Z</updated>
<summary/>
<published>2020-07-01T00:00:00Z</published>
<content># range
range 这个header 头，主要是用于分段下载

    Range: bytes=0-1024

响应:

    http_code=206 Partial Content
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go log</title>
<link href="/b/go/go-log" rel="alternate" type="text/html"/>
<updated>2020-07-01T00:00:00Z</updated>
<summary/>
<published>2019-09-21T00:00:00Z</published>
<content># zap log
Refer: https://studygolang.com/articles/17394

## Sugar Logger
sugar log 支持任意的类型(基于reflect</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-style</title>
<link href="/b/vim/vim-style" rel="alternate" type="text/html"/>
<updated>2020-06-30T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# show charactors
See tab, new line:

	:set list
	:set listchars=tab:&gt;-,eol:&lt;,nbsp:%
	:se</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/go-var" rel="alternate" type="text/html"/>
<updated>2020-07-04T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># Variables
The var statement declares a list of variables

	var c, python, java bool
	var i int
	fm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>map</title>
<link href="/b/go/go-var-map" rel="alternate" type="text/html"/>
<updated>2020-07-01T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># map

## define map
键必须是⽀支持相等运算符 (==、!=) 类型，⽐比如 number、string、 pointer、array、struct，以及对应的 interface</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>make</title>
<link href="/b/go/go-var-make" rel="alternate" type="text/html"/>
<updated>2020-07-10T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 引用
引⽤用类型包括 slice、map 和 channel。

    // 提供初始化表达式。
    a := []int{0, 0, 0}
    a[1] = 10

# new mak</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 的math 语法</title>
<link href="/b/py/math/py-math" rel="alternate" type="text/html"/>
<updated>2020-06-30T00:00:00Z</updated>
<summary/>
<published>2020-06-30T00:00:00Z</published>
<content># number

    0x61
    0o77
    0b11

## random
`[0,1)` 小数

	import random
    random.random()

包含`[</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/net/net-tcpip" rel="alternate" type="text/html"/>
<updated>2020-06-30T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>系统调用</title>
<link href="/b/go/go-os" rel="alternate" type="text/html"/>
<updated>2020-06-30T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 系统调用
Go语言主要是通过两个包完成的。一个是os包，一个是syscall包

1. syscall里提供了什么Chroot/Chmod/Chmod/Chdir…，Getenv/Getgid/G</content>
</entry></feed>