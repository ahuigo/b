<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-08-04T20:40:56Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>Vsc for python</title>
<link href="/b/vsc/vsc-python" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Vsc for python
https://code.visualstudio.com/docs/python/python-tutorial

## go to denifition
1. 安</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js-time</title>
<link href="/b/ria/js-time" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Date Format
&gt; https://zh.wikipedia.org/wiki/ISO_8601

The only format in the spec is a simplified </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-08-04T00:00:00Z</published>
<content># Object

## isEempty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Objec</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Event</title>
<link href="/b/ria/js-dom-event" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Event

## DOM MutationObserver
http://javascript.ruanyifeng.com/dom/mutationobserver.html

### DOM</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 递归promise
Promise 是递归的，Reject 不是

    const onResolved = e =&gt; console.log('resolve , ', e );
    c</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
## throw any type
    throw "string"
    throw {message:"msg"}
    e = Error('msg')
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang fmt</title>
<link href="/b/go/6.go-fmt" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># fmt

- fmt.Println : space, with newline
- fmt.Print : without newline
- fmt.Printf : format

prin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg的使用</title>
<link href="/b/go/2.go-pkg" rel="alternate" type="text/html"/>
<updated>2019-07-24T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 结构
1. 参考How to Write Go Code https://golang.org/doc/code.html

2. 环境变量$ go env

## workspace
可以有多个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-datatype</title>
<link href="/b/db/mysql-var" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Data Type(数据类型)

	NULL means you do not have to provide a value for the field... default to null
	</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-time</title>
<link href="/b/db/mysql-time" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Time Type
精确到微秒

    TIME(6), DATETIME(6), TIMESTAMP(6)

# Format Convert Time

## select now(),sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Result

    | id | status |
    +----+--------+
    |  1 | A      |
    update test5 set status = </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 编程</title>
<link href="/b/c/shell-" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming
Shell 编程笔记

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>expect 键盘模拟</title>
<link href="/b/c/ops-expect" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Preface
Expect 是Tcl/Tk 语言最有名的扩展，可通过[tcl/tk](/p/linux-tcl) 了解tcl/tk 的用法

&gt; 注意：spawn 结束后，一定要加上`inter</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>html5</title>
<link href="/b/ria/js-dom-html5" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Tag

## Forms
属性

    enctype="multipart/form-data"
        default content-type: application/x-ww</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-ddl-install" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
    rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre User and Authentication</title>
<link href="/b/db/postgre-admin-user" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help
    \h alter
    ALTER ROLE name RENAME TO new_name

# Postgre User and Authentication
    ps</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>FUNCTION</title>
<link href="/b/db/postgre-ddl" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># shell

## connect shell
默认同时支持 unix domain socket + ip/port net socket

    psql DBNAME USERNAME
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-time</title>
<link href="/b/db/mysql-time" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Time Type
精确到微秒

    TIME(6), DATETIME(6), TIMESTAMP(6)

# Format Convert Time

## select now(),sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2019-07-18T00:00:00Z</published>
<content># Result

    | id | status |
    +----+--------+
    |  1 | A      |
    update test5 set status = </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2019-07-18T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-tcp</title>
<link href="/b/py/py-tcp" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。

# </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>GMT,UTC,DST,CST 各种时间标准</title>
<link href="/b/c/shell-time" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2012-07-08T00:00:00Z</published>
<content># 各世界时间标准
我们经常遇到这4种时间：GMT,UTC,DST,CST。google了一下，在此做个小结.

## 格林威治标准时间GMT
含义：「格林威治标准时间」(Greenwich Mean</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-file-io</title>
<link href="/b/py/py-file-io" rel="alternate" type="text/html"/>
<updated>2019-07-17T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# flush buffer
开启buffer 后，默认是换行才flush, print 调用的就是sys.stdout

    PYTHONUNBUFFERED=0 pyth</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2019-07-17T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2019-07-17T00:00:00Z</updated>
<summary/>
<published>2019-07-17T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>expect 键盘模拟</title>
<link href="/b/c/ops-expect" rel="alternate" type="text/html"/>
<updated>2019-07-17T00:00:00Z</updated>
<summary/>
<published>2019-07-17T00:00:00Z</published>
<content># Preface
Expect 是Tcl/Tk 语言最有名的扩展，可通过[tcl/tk](/p/linux-tcl) 了解tcl/tk 的用法

&gt; 注意：spawn 结束后，一定要加上`inter</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js 字符串大全</title>
<link href="/b/ria/js-str" rel="alternate" type="text/html"/>
<updated>2019-07-15T00:00:00Z</updated>
<summary/>
<published>2015-03-15T00:00:00Z</published>
<content># Js 字符串大全
字符定义与python 一样, 而且不区分双引号：

    '\x00' == '\u0000'
	'\x31' == "\x31"

	'好' === '\u597D' //</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js fuck</title>
<link href="/b/ria/js-expr" rel="alternate" type="text/html"/>
<updated>2019-07-15T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># eval

    i=5
    f=i=&gt;i
    eval("f(i)")===5

liaoxuefeng 老师利用eval 写的js课程：

	var code = _mdGetCod</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js dom 笔记</title>
<link href="/b/ria/js-dom" rel="alternate" type="text/html"/>
<updated>2019-07-17T00:00:00Z</updated>
<summary/>
<published>2016-01-23T00:00:00Z</published>
<content># Js dom 笔记
    document.documentElement ;//html
    document.body;  //html
# Device
## Navigator
na</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSH SERVER 的配置</title>
<link href="/b/net/net-ssh-server" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2019-06-23T00:00:00Z</published>
<content># SSH SERVER
OpenSSH Installations under CentOS Linux

	# To install the server and client type:
	yu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的时间函数</title>
<link href="/b/go/19.go-time" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2019-07-13T00:00:00Z</published>
<content># tick and after

## timer/ticker, 定时器
`chan time.Time: timer.C = ticker.C`
定时器对象

    timer := time</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 的Context Managers</title>
<link href="/b/py/py-expr-context" rel="alternate" type="text/html"/>
<updated>2019-07-13T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Context Managers
http://arnavk.com/posts/python-context-managers/
https://docs.python.org/3/librar</content>
</entry></feed>