<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-03-08T23:36:24Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>py-server</title>
<link href="/b/py/py-server" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
参考：https://zhuanlan.zhihu.com/p/30056870

## CGI
原始的CGI 程序只是单纯的多进程fork 模式[/demo/py/socket-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>asyncio</title>
<link href="/b/py/py-asyncio" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># asyncio
asyncio是基于coroutine 的，包括了:
1. 事件循环(event loop)
2. Task: 对coroutine 的封装，包含各种状态
    1. Pendi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>does-a-thread-waiting-on-io-also-block-a-core?</title>
<link href="/b/py/py-async-cpu" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># does-a-thread-waiting-on-io-also-block-a-core
&gt; Refer to: https://stackoverflow.com/questions/3568</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c 语言之指针</title>
<link href="/b/c/c-pointer" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
关于指针有两种运算符：*号是指针间接寻址运算符（Indirection Operator），*pi表示取指针pi所指向的变量的值，也称为Dereference操作. &amp;运算符的操作</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c lib 库</title>
<link href="/b/c/c-lib" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
在[c 编译](/p/c-compile) 中我提到了c 的标准库，c标准库包括: header(.h 文件)头文件，和lib（.c）库文件。
大多数库函数在libc 中, 本笔记</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 之 编译</title>
<link href="/b/c/c-compile" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface

本文总结关于c 编译的基础用法: 宏，头文件

# include 头文件
公共的东西(External 声明，定义)，可以放到头文件中：`*.h`, 可以被多次引用（其实跟`.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找两有序数组中第N 大的值</title>
<link href="/b/algorithm/algorithm-find-the-nth-of-2-sorted-array" rel="alternate" type="text/html"/>
<updated>2019-03-07T00:00:00Z</updated>
<summary/>
<published>2016-09-26T00:00:00Z</published>
<content># 查找两有序数组中第N 大的值
问题:
&gt; A B 两个递增有序数组, 将两数组中的元素合并到一起。请找到其中第N大的数

Find the n'th max number of 2 sorted </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Chrome devtools 使用汇总</title>
<link href="/b/ria/js-debug-chrome" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># Chrome devtools 使用汇总
chrome://chrome-urls/

## Network dns
- Dns Cache
chrome://net-internals/#dns</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>图的路径问题</title>
<link href="/b/algorithm/graph-path" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-02-17T00:00:00Z</published>
<content># 图的路径问题
主要包含这么几个问题
1. 最短路径
2. 一笔画问题
    1. 一笔画的充要条件：奇顶点（连接的边数量为奇数的顶点）的数目等于0(任意起点)或者2(奇顶点为起点)
    2.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>解决Vscode 中文输入法乱入的Backspace 字符</title>
<link href="/b/vsc/vsc-ime" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-08-17T00:00:00Z</published>
<content># 解决Vscode 中文输入法乱入的Backspace 字符
vscode 下的中文输入法老键入 backspace controller character(`\u0008`, `\u0003`)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/net/net-tcpip" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Linux Network Tool</title>
<link href="/b/net/3.net-tool" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2016-10-20T00:00:00Z</published>
<content># Linux Network Tool
网络相关的工具有:

	dns: ip 或 ifconfig，dig
	monitor: netstat -lntp 或 ss -plat
	socket: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python PIL(pillow)</title>
<link href="/b/py/py-pil" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。

由于PIL仅支持到Pytho</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssl(https)</title>
<link href="/b/nginx/nginx-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ssl(https)

	server {
		listen 80;
		listen 443 default_server ssl;#加ssl 时会自动开启ssl, 不能再加 ssl on;

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl</title>
<link href="/b/net/net-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
参考阮一峰的[ssl运行机制]，TLS/SSL 基于非对称加密，它解决了以下风险：

1. 窃听风险(eavesdropping): 通过私钥加密避免第三方窃取风险
2. 篡改风险</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSL Certificate Authority(CA)</title>
<link href="/b/net/net-ssl-ca" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content># 证书级别
http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html

# SNI(SSL/TLS Server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python thread 线程笔记</title>
<link href="/b/py/py-thread" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2019-03-05T00:00:00Z</published>
<content># threading
Python的标准库提供了两个模块：`_thread`和`threading`: `_thread`是低级模块，threading是高级模块，对_thread进行了封装。

绝</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-http</title>
<link href="/b/py/py-http" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# urllib
urllib2 is deprecated, use requests instead , except: `urllib.parse.urlsplit/url</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>背单词</title>
<link href="/b/eng/eng-word" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># my method
## 单词
1. 盲读
2. 不会的单词划线
3. 结合context 推断
    4. 查词：音标 本文中含义
4.记忆：
   1. 音形义 :连读 弱读 强读 音变
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>写论文要用到的网站</title>
<link href="/b/em/em-paper" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 写论文要用到的网站
## 参考文献格式生成
https://www.bigan.net/reference/

## 查重
https://www.paperyy.com/
http://www.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/ops-init" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>PHP Array</title>
<link href="/b/php/php-array" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Array

## 像mysql 一样对多列数据排序

	$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>删除mavericks 10.9 自带的输入法</title>
<link href="/b/mac/mac-inputmethod" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2019-03-02T00:00:00Z</published>
<content># Preface
如果你想删除mavericks 10.9 自带的输入法, 目前只能通过 修改~/Library/Preferences/com.apple.HIToolbox.plist
plis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>cache 穿透问题</title>
<link href="/b/db/redis-cache" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2019-03-02T00:00:00Z</published>
<content># cache 失效问题

## 缓存穿透
Q: 不存在的Key， 导致访问穿透到DB
A： 将存在的key 用bloomfilter 档一下，再访问DB

## 缓存雪崩
Q: 大量key同时失效 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql explain 的使用</title>
<link href="/b/db/mysql-index-explain" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Mysql Explain 的使用

## show index

	show index from table_name;

## explain
用explain 获取mysql 如何quer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Dependency Injector(IoC)</title>
<link href="/b/code/code-di-pattern" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Dependency Injector(IoC)
依赖注入（Dependency Injection）又称控制反转（Inversion of Control）主要用来实现不同模块或类之间的解耦，可</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符串搜索算法KMP</title>
<link href="/b/algorithm/algo-str-search" rel="alternate" type="text/html"/>
<updated>2019-03-01T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># 字符串搜索算法KMP
容易想到的搜索算法是O(N*M)
KMP 则是O(N) 复杂度

搜索`ahuigo` 时，当匹配到`,`, 我们可以跳过`ahui`

    ahui, let's go</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-08T00:00:00Z</published>
<content># Variable

	let num++
	let ++num

	declare -i num
	num+=1

	((num++))

## readonly

	x=6
	readonly </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-os</title>
<link href="/b/py/py-os" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# os 
## platform

    from sys import platform
	if platform == 'Darwin':  # 如果是Mac OS X
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 文件处理</title>
<link href="/b/py/py-file" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Directory
建议用Path 代替

## file property
os

### os home

    os.getenv('HOME')

    from os.path im</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>proxy 之charles</title>
<link href="/b/net/proxy/proxy-charles" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content># Charles
## delete

	Cmd+del delete all session
	Shift+Cmd+P Mac OS proxy

## tools

	Shift+Cmd+w m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-tcp</title>
<link href="/b/py/py-tcp" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssh proxy</title>
<link href="/b/net/net-ssh-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># ssh proxy

    -f Rquests ssh to go to background just before command execution.

## tcp port forw</content>
</entry></feed>