<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-03-06T15:27:34Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>解决Vscode 中文输入法乱入的Backspace 字符</title>
<link href="/b/vsc/vsc-ime" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-08-17T00:00:00Z</published>
<content># 解决Vscode 中文输入法乱入的Backspace 字符
vscode 下的中文输入法老键入 backspace controller character(`\u0008`, `\u0003`)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/net/net-tcpip" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Linux Network Tool</title>
<link href="/b/net/3.net-tool" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2016-10-20T00:00:00Z</published>
<content># Linux Network Tool
网络相关的工具有:

	dns: ip 或 ifconfig，dig
	monitor: netstat -lntp 或 ss -plat
	socket: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python PIL(pillow)</title>
<link href="/b/py/py-pil" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。

由于PIL仅支持到Pytho</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssl(https)</title>
<link href="/b/nginx/nginx-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ssl(https)

	server {
		listen 80;
		listen 443 default_server ssl;#加ssl 时会自动开启ssl, 不能再加 ssl on;

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl</title>
<link href="/b/net/net-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
参考阮一峰的[ssl运行机制]，TLS/SSL 基于非对称加密，它解决了以下风险：

1. 窃听风险(eavesdropping): 通过私钥加密避免第三方窃取风险
2. 篡改风险</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSL Certificate Authority(CA)</title>
<link href="/b/net/net-ssl-ca" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content># 证书级别
http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html

# SNI(SSL/TLS Server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python thread 线程笔记</title>
<link href="/b/py/py-thread" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2019-03-05T00:00:00Z</published>
<content># threading
Python的标准库提供了两个模块：`_thread`和`threading`: `_thread`是低级模块，threading是高级模块，对_thread进行了封装。

绝</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-http</title>
<link href="/b/py/py-http" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# urllib
urllib2 is deprecated, use requests instead , except: `urllib.parse.urlsplit/url</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>背单词</title>
<link href="/b/eng/eng-word" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># my method
## 单词
1. 盲读
2. 不会的单词划线
3. 结合context 推断
    4. 查词：音标 本文中含义
4.记忆：
   1. 音形义 :连读 弱读 强读 音变
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>写论文要用到的网站</title>
<link href="/b/em/em-paper" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 写论文要用到的网站
## 参考文献格式生成
https://www.bigan.net/reference/

## 查重
https://www.paperyy.com/
http://www.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/ops-init" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>PHP Array</title>
<link href="/b/php/php-array" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Array

## 像mysql 一样对多列数据排序

	$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>删除mavericks 10.9 自带的输入法</title>
<link href="/b/mac/mac-inputmethod" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2019-03-02T00:00:00Z</published>
<content># Preface
如果你想删除mavericks 10.9 自带的输入法, 目前只能通过 修改~/Library/Preferences/com.apple.HIToolbox.plist
plis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>cache 穿透问题</title>
<link href="/b/db/redis-cache" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2019-03-02T00:00:00Z</published>
<content># cache 失效问题

## 缓存穿透
Q: 不存在的Key， 导致访问穿透到DB
A： 将存在的key 用bloomfilter 档一下，再访问DB

## 缓存雪崩
Q: 大量key同时失效 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql explain 的使用</title>
<link href="/b/db/mysql-index-explain" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Mysql Explain 的使用

## show index

	show index from table_name;

## explain
用explain 获取mysql 如何quer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Dependency Injector(IoC)</title>
<link href="/b/code/code-di-pattern" rel="alternate" type="text/html"/>
<updated>2019-03-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Dependency Injector(IoC)
依赖注入（Dependency Injection）又称控制反转（Inversion of Control）主要用来实现不同模块或类之间的解耦，可</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符串搜索算法KMP</title>
<link href="/b/algorithm/algo-str-search" rel="alternate" type="text/html"/>
<updated>2019-03-01T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># 字符串搜索算法KMP
容易想到的搜索算法是O(N*M)
KMP 则是O(N) 复杂度

搜索`ahuigo` 时，当匹配到`,`, 我们可以跳过`ahui`

    ahui, let's go</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-08T00:00:00Z</published>
<content># Variable

	let num++
	let ++num

	declare -i num
	num+=1

	((num++))

## readonly

	x=6
	readonly </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-os</title>
<link href="/b/py/py-os" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# os 
## platform

    from sys import platform
	if platform == 'Darwin':  # 如果是Mac OS X
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 文件处理</title>
<link href="/b/py/py-file" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Directory
建议用Path 代替

## file property
os

### os home

    os.getenv('HOME')

    from os.path im</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>proxy 之charles</title>
<link href="/b/net/proxy/proxy-charles" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># Charles
## delete

	Cmd+del delete all session
	Shift+Cmd+P Mac OS proxy

## tools

	Shift+Cmd+w m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-tcp</title>
<link href="/b/py/py-tcp" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssh proxy</title>
<link href="/b/net/net-ssh-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># ssh proxy

    -f Rquests ssh to go to background just before command execution.

## tcp port forw</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的list/tuple 笔记</title>
<link href="/b/py/py-var-list" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># list and tuple
因为tuple 是增加删除元素的不可变的list(数据可以变)，所以代码更安全。
如果可能，能用tuple代替list就尽量用tuple。

	list = [1,2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 语法</title>
<link href="/b/py/py-grammar" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-03-01T00:00:00Z</published>
<content># compare
```s
&gt;&gt;&gt; 1&lt;3&gt;=3&gt;1==1&lt;100
True
```

# Condition &amp; Loop

## control

	exit(0);
		like exit(0</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 加密实例</title>
<link href="/b/py/py-crypt" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># python 加密实例
[加密算法简介](/p/algorithm/algorithm-crypt)

    pip install pycrypto

# AES

## aes-256-cb</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell proxy tool</title>
<link href="/b/net/net-proxy-tool" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-21T00:00:00Z</published>
<content># Android
HowTo: Proxy Non-Proxy-Aware Android Applications through Burp
http://blog.dornea.nu/2014/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-socks</title>
<link href="/b/net/net-proxy-socks" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># socks 协议
SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是"SOCKetS"的缩写

1. 当防火墙后的客户端要访问外部的服务器时，就跟SOCKS代</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>各种语言的fiddle</title>
<link href="/b/c/ops-fiddle" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2018-08-27T00:00:00Z</published>
<content># 各种语言的fiddle
各种语言的fiddle
1. js:
    https://ahuigo.github.io/a/demo/fiddle/fiddle.html # 加上`data:te</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Copy List with Random Pointer</title>
<link href="/b/algorithm/list-copy" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># Copy List with Random Pointer
复制带随机指针的链表问题：
https://www.kancloud.cn/kancloud/data-structure-and-al</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>求两链表的交点</title>
<link href="/b/algorithm/list-intersection" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># 求两链表的交点
我想有3个方法：
1. 将一个链表首尾相连，然后采用[Floyd 判圈法](/p/algorithm/list-intersection-floyd)
2. 用两个栈遍历链表，然后</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>单链表判圈之Floyd算法</title>
<link href="/b/algorithm/list-intersection-floyd" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 单链表是否有环之龟兔算法(tortoise-hare)
Floyd判圈算法(Floyd Cycle Detection Algorithm), 也叫龟兔算法(tortoise-hare)
![cy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry></feed>