<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-06-17T21:09:34Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>js-time</title>
<link href="/b/ria/js-time" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Date Format
&gt; https://zh.wikipedia.org/wiki/ISO_8601

The only format in the spec is a simplified </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 时间函数的用法笔记</title>
<link href="/b/py/py-time" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2018-04-02T00:00:00Z</published>
<content># time 工具
time 提供基本的时间，sleep

	import time
	time.time()
		19972314124.05238
        time.localetime(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2019-06-17T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>awk 简介</title>
<link href="/b/c/ops-awk" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2019-06-17T00:00:00Z</published>
<content># Preface
awk  命令行的基本语法为

	awk option 'script' file1 file2 ...
	awk option -f scriptfile file1 file2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vscode 笔记</title>
<link href="/b/vsc/vsc-" rel="alternate" type="text/html"/>
<updated>2019-06-16T00:00:00Z</updated>
<summary/>
<published>2018-01-03T00:00:00Z</published>
<content># vscode
cmd+p

    ?   help
    @{symbol} jump to symbol 
    cmd+shift+m 切换问题面板
    cmd+j 切换集成终端(c</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-06-16T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux os</title>
<link href="/b/c/linux-os" rel="alternate" type="text/html"/>
<updated>2019-06-16T00:00:00Z</updated>
<summary/>
<published>2019-06-15T00:00:00Z</published>
<content># Check os Version

    cat /etc/os-release
    lsb_release -a
    hostnamectl

# vim

    apt-get u</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-complete</title>
<link href="/b/vim/vim-complete" rel="alternate" type="text/html"/>
<updated>2019-06-15T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Omnicomplete
`:help omnifunc and :help coml-omni`
`:help ins-completion` for an overview</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tool</title>
<link href="/b/c/ops-user" rel="alternate" type="text/html"/>
<updated>2019-06-15T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># tool
last #显示最后登录者
who #显示当前登录者
w：谁登录进来了
id：用户/组身份信息

# su

    su -c 'whoami' - root
    /bin/su </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim 使用之变量</title>
<link href="/b/vim/vim-var" rel="alternate" type="text/html"/>
<updated>2019-06-11T00:00:00Z</updated>
<summary/>
<published>2019-06-11T00:00:00Z</published>
<content># vim 使用之变量
本文会系统描述vim 的语法，如果想了解具体选项和操作技巧，参考我的vim 笔记

主要参考 [book]:
http://learnvimscriptthehardway.s</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-cmd</title>
<link href="/b/vim/vim-cmd" rel="alternate" type="text/html"/>
<updated>2019-06-15T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># autocmd
Syntax:

	:au[tocmd] [group] {event} {pat} [nested] {cmd}
			Add {cmd} to the list of comm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-options</title>
<link href="/b/vim/vim-options" rel="alternate" type="text/html"/>
<updated>2019-06-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Set options 
set 命令的语法

	:set {option}
	:se no{option} 
	:se {option}! "toggle option
	:set {optio</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-pattern</title>
<link href="/b/vim/vim-pattern" rel="alternate" type="text/html"/>
<updated>2019-06-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# pattern

	:h pattern

## charlist
Character classes

	\s	whitespace character: &lt;Space&gt; </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js dom 笔记</title>
<link href="/b/ria/js-dom" rel="alternate" type="text/html"/>
<updated>2019-06-10T00:00:00Z</updated>
<summary/>
<published>2016-01-23T00:00:00Z</published>
<content># Js dom 笔记
    document.documentElement ;//html
    document.body;  //html

# Navigator
navigator.a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Event</title>
<link href="/b/ria/js-dom-event" rel="alternate" type="text/html"/>
<updated>2019-06-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Event

## DOM MutationObserver
http://javascript.ruanyifeng.com/dom/mutationobserver.html

### DOM</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/js-css-layout" rel="alternate" type="text/html"/>
<updated>2019-06-16T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># CSS 布局
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>CSS 笔记</title>
<link href="/b/ria/js-css" rel="alternate" type="text/html"/>
<updated>2019-06-10T00:00:00Z</updated>
<summary/>
<published>2017-12-12T00:00:00Z</published>
<content># CSS 笔记
css/html5/js 兼容表
http://caniuse.com/

# priority

	style &gt; id &gt; hover(鼠标悬停) &gt; class &gt; tag
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>font</title>
<link href="/b/ria/js-css-font" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># font
like bootstrap

    @font-face {
    font-family: 'Glyphicons Halflings';

    src: url('../f</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-process</title>
<link href="/b/py/py-process" rel="alternate" type="text/html"/>
<updated>2019-06-16T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
- sh: sh之于subprocess， 相当于requests 对于urllib2
	1. sh.ls("-l", "/tmp", color="never")
	2. sh.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>eng-spoken</title>
<link href="/b/eng/eng-spoken" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

Prime Linking:
	this is Alex

Geminates:
	Oh hey, what's up man?

# insertion
Okey, See y</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>english punctuation</title>
<link href="/b/eng/eng-punctuation" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># English punctuation
https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6

	punctuation mark	n</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符编码简介</title>
<link href="/b/code/code-character" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2014-05-10T00:00:00Z</published>
<content># 字符编码简介
本文试图理清字符编码系统的整体结构.如有理解不对请指正.

# 字符编码
按照[现代的编码模型],字符编码的主要概念分为：有哪些字符(字符表)、它们的编号(编码字符集)、这些编号如何</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 之进程</title>
<link href="/b/c/ops-process" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2019-06-04T00:00:00Z</published>
<content># Preface
本文总结下进程那些事儿

# PCB 进程控制块
linux 中每个进程都是由进程控制块(PCB) 控制的，PCB是一个task_struct 结构体。

- 进程id。系统中每个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ELF 文件格式</title>
<link href="/b/c/as-elf" rel="alternate" type="text/html"/>
<updated>2019-06-04T00:00:00Z</updated>
<summary/>
<published>2015-07-13T00:00:00Z</published>
<content># ELF 文件格式
ELF 文件格式是一个开放标准，linux 系统的可执行文件都采用此格式。它用于三种不同的文件类型：

- 可重定位的目标文件（Relocatable, Object file）</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vim Edit</title>
<link href="/b/vim/vim-edit" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># 复制/删除/粘贴(copy/del/paste)

## del 删除

	d2w
	d^ d$
	dd 删除整行

	x 代表dl(删除当前光标下的字符)
	X 代表dh(删除当前光标左边的字符</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vim visual</title>
<link href="/b/vim/vim-visual" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># Vim visual
可视选择模式一共有 3种 状态:

	v 普通visual
	V 行选visual
	ctrl+v 矩形块选 #对于矩形选而言，o是垂直切向，O是水平切向

	gv #回到上</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-help</title>
<link href="/b/vim/vim-help" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># help 帮助
&gt; Refer to : http://vim.wikia.com/wiki/Learn_to_use_help

之所以我把help放在这里，是因为help实在是太重要了。关于d</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vim Guide</title>
<link href="/b/vim/vim-guide" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># Vim Guide
学习VIM 的步骤
1. 初始VIM 基本操作，在bash 输入： `$ vimtutor`
2. 系统学习VIM: learn vim the hard way
    1.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 终端使用技巧</title>
<link href="/b/c/shell-zsh" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># Preface
本文总结了shell 终端的使用技术: 主要包括Readline 使用，以及zsh 与iTerm2 的使用

# Shortcuts
下面列出的快捷键大部分是通用的，有一小部分快捷</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim 笔记</title>
<link href="/b/vim/vim-notes" rel="alternate" type="text/html"/>
<updated>2019-05-29T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># vim 笔记
本文是vim 相关的总结，不会有太多的注释 —— 只是方便回顾.

&gt; 使用vim 时建议将key repeat调到最快, 把key delay调到最小
&gt; 很多时候我会用Ctrl+</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2019-06-17T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

    基本 hjkl
    单词 
        小单词wbe
            w: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ajax cors</title>
<link href="/b/ria/js-ajax-cors" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ajax cors

## 请求分类
浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。
只要同时满足以下两大条件，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2019-05-27T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-06-17T00:00:00Z</updated>
<summary/>
<published>2019-06-17T00:00:00Z</published>
<content># Object

## isEempty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Objec</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2019-05-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
    try {
        r1 = s.length; // 此处应产生错误
        r2 = 100; // 该语句不会执行
         throw </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>react framework</title>
<link href="/b/ria/react-framework" rel="alternate" type="text/html"/>
<updated>2019-05-24T00:00:00Z</updated>
<summary/>
<published>2019-05-23T00:00:00Z</published>
<content># 前端框架优化方案
本文是对目前所使用前端框架的梳理、优化。

本文优化目标是：
1. 第一目标：更好的业务开发效率
    1. KISS原则: 保持简洁、统一
       1. 统一编码风格：</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符串搜索算法KMP</title>
<link href="/b/algorithm/algo-str-search" rel="alternate" type="text/html"/>
<updated>2019-05-24T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># 字符串搜索算法KMP
容易想到的搜索算法是O(N*M)
KMP 则是O(N) 复杂度

搜索`ahuigo` 时，当匹配到`,`, 我们可以跳过`ahui`

    ahui, let's go</content>
</entry></feed>