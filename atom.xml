<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-02-28T22:34:26Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-08T00:00:00Z</published>
<content># Variable

	let num++
	let ++num

	declare -i num
	num+=1

	((num++))

## readonly

	x=6
	readonly </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-os</title>
<link href="/b/py/py-os" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# os 
## platform

    from sys import platform
	if platform == 'Darwin':  # 如果是Mac OS X
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 文件处理</title>
<link href="/b/py/py-file" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Directory
建议用Path 代替

## file property
os

### os home

    os.getenv('HOME')

    from os.path im</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>proxy 之charles</title>
<link href="/b/net/proxy/proxy-charles" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2019-02-28T00:00:00Z</published>
<content># Charles
## delete

	Cmd+del delete all session
	Shift+Cmd+P Mac OS proxy

## tools

	Shift+Cmd+w m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-tcp</title>
<link href="/b/py/py-tcp" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssh proxy</title>
<link href="/b/net/net-ssh-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-23T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># ssh proxy

    -f Rquests ssh to go to background just before command execution.

## tcp port forw</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的list/tuple 笔记</title>
<link href="/b/py/py-var-list" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># list and tuple
因为tuple 是增加删除元素的不可变的list(数据可以变)，所以代码更安全。
如果可能，能用tuple代替list就尽量用tuple。

	list = [1,2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 语法</title>
<link href="/b/py/py-grammar" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-03-01T00:00:00Z</published>
<content># compare
```s
&gt;&gt;&gt; 1&lt;3&gt;=3&gt;1==1&lt;100
True
```

# Condition &amp; Loop

## control

	exit(0);
		like exit(0</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 加密实例</title>
<link href="/b/py/py-crypt" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># python 加密实例
[加密算法简介](/p/algorithm/algorithm-crypt)

    pip install pycrypto

# AES

## aes-256-cb</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell proxy tool</title>
<link href="/b/net/net-proxy-tool" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-21T00:00:00Z</published>
<content># Android
HowTo: Proxy Non-Proxy-Aware Android Applications through Burp
http://blog.dornea.nu/2014/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-socks</title>
<link href="/b/net/net-proxy-socks" rel="alternate" type="text/html"/>
<updated>2019-02-22T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># socks 协议
SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是"SOCKetS"的缩写

1. 当防火墙后的客户端要访问外部的服务器时，就跟SOCKS代</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>各种语言的fiddle</title>
<link href="/b/c/ops-fiddle" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2018-08-27T00:00:00Z</published>
<content># 各种语言的fiddle
各种语言的fiddle
1. js:
    https://ahuigo.github.io/a/demo/fiddle/fiddle.html # 加上`data:te</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Copy List with Random Pointer</title>
<link href="/b/algorithm/list-copy" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># Copy List with Random Pointer
复制带随机指针的链表问题：
https://www.kancloud.cn/kancloud/data-structure-and-al</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>求两链表的交点</title>
<link href="/b/algorithm/list-intersection" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># 求两链表的交点
我想有3个方法：
1. 将一个链表首尾相连，然后采用[Floyd 判圈法](/p/algorithm/list-intersection-floyd)
2. 用两个栈遍历链表，然后</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>单链表判圈之Floyd算法</title>
<link href="/b/algorithm/list-intersection-floyd" rel="alternate" type="text/html"/>
<updated>2019-02-21T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 单链表是否有环之龟兔算法(tortoise-hare)
Floyd判圈算法(Floyd Cycle Detection Algorithm), 也叫龟兔算法(tortoise-hare)
![cy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-socks</title>
<link href="/b/net/net-socks" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是"SOCKetS"的缩写[1]。

1. 当防火墙后的客户端要访问外部的服务器时，就跟SO</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>brew dev</title>
<link href="/b/mac/mac-brew-dev" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># Preface

# rule
brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>图的路径问题</title>
<link href="/b/algorithm/graph-path" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2019-02-17T00:00:00Z</published>
<content># 图的路径问题
主要包含这么几个问题
1. 最短路径
2. 一笔画问题
    1. 一笔画的充要条件：奇顶点（连接的边数量为奇数的顶点）的数目等于0(任意起点)或者2(奇顶点为起点)
    2.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell proxy</title>
<link href="/b/net/net-proxy" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># Android
HowTo: Proxy Non-Proxy-Aware Android Applications through Burp
http://blog.dornea.nu/2014/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python watch file</title>
<link href="/b/py/py-file-watch" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># python watch file
Some methods: https://stackoverflow.com/questions/182197/how-do-i-watch-a-file-f</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Change ssh port</title>
<link href="/b/net/net-ssh-port" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2019-02-16T00:00:00Z</published>
<content># Change ssh port

1.Config : `$ vi /etc/ssh/sshd_config`, if you wanna support multiple port like 2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>netcat</title>
<link href="/b/net/net-ncat" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># netcat,
[nc](http://www.oschina.net/translate/linux-netcat-command?p=2#comments)

# nc
Netcat 或者叫 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>防火墙</title>
<link href="/b/net/net-iptables" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># 原理
参考[Iptables防火墙原理详解](http://segmentfault.com/a/1190000002540601)

## netfilter/iptables
Netfilte</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c socket 编程</title>
<link href="/b/c/c-socket" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2019-02-16T00:00:00Z</published>
<content># Preface
Socket 可以有很多概念：

1. 在TCP/IP 中,"IP + TCP或UDP端口号" 唯一标识网络通讯中的*进程*，"IP+端口号"就被称为socket
2. 在TCP </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>计算机结构</title>
<link href="/b/c/c-os" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2019-02-16T00:00:00Z</published>
<content># Preface

本文描述的是现代的计算机所采用的冯诺伊曼(Von Neumann)结构: CPU(Central Procession Unit) + Memory + Device

# OS</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>深度优先DFS和广度优先BFS</title>
<link href="/b/algorithm/graph-dfs-bfs" rel="alternate" type="text/html"/>
<updated>2019-02-28T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># DFS(Depth First Search) 深度优先搜索
所有的递归函数都可以用基于stack 的循环结构去实现, 这样我们就能直接控制栈的长度。为了具体阐明这个方法，举一个关于[DFS] (</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>如何避免深度递归</title>
<link href="/b/algorithm/3.algo-self-call" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 如何避免深度递归
我们先看看函数与递归的本质：

- 函数调用的本质是: 我们在做一件事过程中，我们发现必须要先完成另外一件事，于是中断当前的工作，并把当前的工作信息保存到栈(stack); 当别</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go time</title>
<link href="/b/go/19.go-time" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># tick and after

## timer/ticker, 定时器
`chan time.Time: timer.C = ticker.C`
定时器对象

    timer := time</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>BFPRT 算法</title>
<link href="/b/algorithm/sort-topk" rel="alternate" type="text/html"/>
<updated>2019-02-16T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># Topk 算法之BFPRT算法
基于最大/小堆的TopK 算法复杂度为 $O(n\log n)$

其实还有O(n)的算法 —— BFPRT 基于减治法，采用类似二分法的快排分区减低复杂度。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找数组中的中值</title>
<link href="/b/algorithm/sort-topk-kth" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 查找数组中的中值
This is a question about find k'th number in an array.

    def find_kth(arr, k):
       </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>android 刷包工具</title>
<link href="/b/net/net-sniffer-android" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-13T00:00:00Z</published>
<content># android 刷包工具
1. tPacketCapture: uses the Android VPN service to intercept packets and capture them</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>combination</title>
<link href="/b/math/math-probability" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># probility
德摩根定律: $(A\cup B)^{C}=A^{C}\cap B^{C}$

概率计算总结
1. 非A	$P(A^{c})=1-P(A)$
2. A或B	$P(A\cup B</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数学运算符</title>
<link href="/b/math/math-num-operator" rel="alternate" type="text/html"/>
<updated>2019-02-14T00:00:00Z</updated>
<summary/>
<published>2019-02-14T00:00:00Z</published>
<content># 数学运算符
Exponentiation

    a^x读作“a的x次方”或“a的n次幂“。

Power function

    x^n

对数是幂运算的逆运算

## Logarithm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>rime 鼠须管输入法</title>
<link href="/b/mac/mac-rime" rel="alternate" type="text/html"/>
<updated>2019-02-20T00:00:00Z</updated>
<summary/>
<published>2019-02-20T00:00:00Z</published>
<content># Rime 中的數據文件分佈及作用
除程序文件以外，Rime 還包括多種數據文件。 這些數據文件存在於以下位置：

共享資料夾(不同的系统不一样ni h)

    【中州韻】 /usr/share</content>
</entry></feed>