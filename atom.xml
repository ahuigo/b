<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-01-07T23:34:44Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>如何避免深度递归</title>
<link href="/b/algorithm/algorithm-self-call" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 如何避免深度递归
我们先看看函数与递归的本质：

- 函数调用的本质是: 我们在做一件事过程中，我们发现必须要先完成另外一件事，于是中断当前的工作，并把当前的工作信息保存到栈(stack); 当别</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Golang 的Reflection
Go 的反射有三个基础概念: Types Types, Kinds, and Values. 

## 获取变量反射类型 TypeOf
你可以通过`refTy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Interfaces</title>
<link href="/b/go/16.go-interface" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Interfaces
Interface：
1. Interface 可以用来模拟泛型，但是是运行时模拟，没有编译时快
1. method 没有 public protecte..., 如果要被其</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Golang func
func 是func-value

# Function Closures
https://stackoverflow.com/questions/21961615/why</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-test</title>
<link href="/b/go/15.go-test" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
Go has a lightweight test framework composed of the go test command and the testing packag</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Pointers</title>
<link href="/b/go/13.go-pointer" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Pointers
支持指针类型 *T,指针的指针 **T,以及包含包名前缀的 *&lt;package&gt;.T。
The type `*T` is a pointer to a T value. Its </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>filepath</title>
<link href="/b/go/12.go-file" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># filepath

  import "path/filepath"
  fileext := filepath.Ext(filename)

# file

## read

  "io/iou</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>english punctuation</title>
<link href="/b/eng/eng-punctuation" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># English punctuation
https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6

	punctuation mark	n</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c debug</title>
<link href="/b/c/c-debug" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># assert
断言, 如果定义了NODEBUG (或者直接在编译时加上选项-DNDEBUG), 则assert函数则不被编译

	#define NDEBUG
	assert(111)

# ob</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c-debug-gdb</title>
<link href="/b/c/c-debug-gdb" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 启动gdb
- First, let excute file records Source file a.c via gcc parameter "-g"

	gcc -g a.c

- Seco</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang help</title>
<link href="/b/go/11.go-help" rel="alternate" type="text/html"/>
<updated>2019-01-03T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help command
Use "go help [command]" for more information about a command.

    go help fmt

# go </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>经典排序算法的实现</title>
<link href="/b/algorithm/algo-sort" rel="alternate" type="text/html"/>
<updated>2019-01-03T00:00:00Z</updated>
<summary/>
<published>2013-09-26T00:00:00Z</published>
<content># 经典排序算法实现
常规的几种排序算法, 参考[维基sort](http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>make</title>
<link href="/b/go/7.go-var-make" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># new make
new 的作用是:为其分配零值内存, 初始化 一个指向类型的指针 `(*T)`，
`someInt := new(int)` 相当于:

    func newInt *int</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang fmt</title>
<link href="/b/go/6.go-fmt" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># fmt

- Println : with newline
- Print : without newline
- Printf : format

## Printf

    fmt.Prin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/5.go-func" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Golang func
func 是func-value

# Function Closures
https://stackoverflow.com/questions/21961615/why</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang math</title>
<link href="/b/go/3.go-math" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Golang math
## rand

  import "math/rand"

    //生成随机种子
    rand.Seed(time.Now().Unix())
    rand.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang-pkg</title>
<link href="/b/go/2.go-import" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># package
Go Programs start running in package main.


	package main

	import (
		"fmt"
		"math/rand</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang struct(array, slice)</title>
<link href="/b/go/10.go-slice" rel="alternate" type="text/html"/>
<updated>2019-01-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># struct
define:

	type Vertex struct {
		X int
		Y int
	}

	v := Vertex{1, 2}
	v.X = 4
	Vertex{1, 2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-hello</title>
<link href="/b/go/1.go-start" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# install

	brew install go

# hello

## 1.set workspace

	export GOPATH=$HOME/www/go
	# </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Start Golang</title>
<link href="/b/go/0.go-book" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2016-06-19T00:00:00Z</published>
<content># Start golang
1. start
https://tour.golang.org/basics/5
1. https://go101.org/article/101.html
1. sp</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>券商</title>
<link href="/b/bc/stock-fee" rel="alternate" type="text/html"/>
<updated>2019-01-01T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 券商

## 区别
&gt; 本节出处: https://www.jisilu.cn/question/46153

IB、 Scottrade 、 Firstrade 、Sogotrad、老虎证券、冨</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Analysis of Algorithm</title>
<link href="/b/algorithm/1.time-complex" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-15T00:00:00Z</published>
<content># Analysis of Algorithm
本文整理下算法的分析方法

##  O/Omega/Thelta 的定义
$Ο$，读音：big-oh、欧米可荣（大写）；表示上界(tightness u</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>防火墙</title>
<link href="/b/net/net-iptables" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-12-31T00:00:00Z</published>
<content># 原理
参考[Iptables防火墙原理详解](http://segmentfault.com/a/1190000002540601)

## netfilter/iptables
Netfilte</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Linux Network Tool</title>
<link href="/b/net/3.net-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-10-20T00:00:00Z</published>
<content># Linux Network Tool
网络相关的工具有:

	dns: ip 或 ifconfig，dig
	monitor: netstat -lntp 或 ss -plat
	socket: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>latex 数学公式</title>
<link href="/b/math/math-latex" rel="alternate" type="text/html"/>
<updated>2019-01-03T00:00:00Z</updated>
<summary/>
<published>2019-01-03T00:00:00Z</published>
<content># Preface
数学公式：
- [latex 数学公式](http://zh.wikipedia.org/wiki/Help:%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>红包飞的概率问题</title>
<link href="/b/math/math-envelope" rel="alternate" type="text/html"/>
<updated>2019-01-01T00:00:00Z</updated>
<summary/>
<published>2015-03-04T00:00:00Z</published>
<content># 红包飞的概率问题
100元的红包，分给10个人，每个人得的数额是随机的。请设计一个公平的算法，保证每个人得到的金额从数学期望上是相等的。

# 生成红包时就拆分好

## 此时生成10个随机数作权</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>英语中的否定语句</title>
<link href="/b/eng/s/1.not" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># 句子
&gt; 本文是eng-sentence-complex.md 的补充

英语里面的否定和中文的是不一样的

    1. I do not know all of them.
    误：对他们</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tool</title>
<link href="/b/c/ops-user" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># tool
last #显示最后登录者
who #显示当前登录者
w：谁登录进来了
id：用户/组身份信息

# su

    su -c 'whoami' - root
    /bin/su </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>OM(Operation Maintenance) 运维工具</title>
<link href="/b/c/ops-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 运维工具
OM(Operation Maintenance) 运维工具

1. Bootstrapping： Kickstart、Cobbler、rpmbuild/xen、kvm、lxc</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd</title>
<link href="/b/c/ops-systemd" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd
使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。

	$ systemctl -</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python shell 子进程</title>
<link href="/b/py/py-shell" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python shell 子进程
很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。

subprocess模块可以让我们非常方便地启动一个子进程，然</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符编码简介</title>
<link href="/b/code/code-character" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2014-05-10T00:00:00Z</published>
<content># 字符编码简介
本文试图理清字符编码系统的整体结构.如有理解不对请指正.

# 字符编码
按照[现代的编码模型],字符编码的主要概念分为：有哪些字符(字符表)、它们的编号(编码字符集)、这些编号如何</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>全屏</title>
<link href="/b/c/ops-virtualbox" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 网络

## Vitual Machine share network
- Internal（内网模式）: 
  只限VM 之间访问，不能访问主机和外网
- NAT: 
  VM --虚拟的NAT</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>傅里叶变换</title>
<link href="/b/algorithm/algorithm-fourier" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2015-09-26T00:00:00Z</published>
<content># 傅里叶变换

今天看到一篇韩昊写的好文 [傅里叶分析之掐死教程](http://zhuanlan.zhihu.com/wille/19763358)，生动形象的讲解了傅里叶的本质： 将时域变换到频</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql explain 的使用</title>
<link href="/b/db/mysql-index-explain" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Mysql Explain 的使用

## show index

	show index from table_name;

## explain
用explain 获取mysql 如何quer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql ddl</title>
<link href="/b/db/mysql-ddl" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Storage Engines

	mariadb&gt; show engines

mysql 下所有引擎的其表结构保存在`tb_name.frm` 中, 而数据结构在不同的引擎下，保存的文件有所不</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>如何生成全局id</title>
<link href="/b/db/mysql-ddl-id" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2015-03-29T00:00:00Z</published>
<content># 如何生成全局id
1. 单点:
	1. mysql auto_increment
	2. redis incrnx
2. 分布:
	1. stepN: 可以部署N 台mysql, 每台机器生成的i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-01-02T00:00:00Z</updated>
<summary/>
<published>2019-01-02T00:00:00Z</published>
<content># database/table/column ddl crud

## database

	//create
	&gt; CREATE DATABASE dbName;
	$ mysqladmin cr</content>
</entry></feed>