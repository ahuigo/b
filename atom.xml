<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-07-07T23:17:57Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2019-07-07T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre Index</title>
<link href="/b/db/postgre-index" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre Index
本文主要围绕postgre 总结一下索引, 参考：[PostgreSQL 9种索引的原理和应用场景](https://yq.aliyun.com/articles/11</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-ddl-install" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
    rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Gorm ddl</title>
<link href="/b/db/gorm-ddl" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2019-07-07T00:00:00Z</published>
<content># Gorm Migrate
自动迁移仅仅会创建表，缺少列和索引，并且不会改变现有列的类型或删除未使用的列以保护数据。

    db.AutoMigrate(&amp;User{})

    db.Aut</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>在家里如何免费使用中国知网？</title>
<link href="/b/course/paper" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content>在家里如何免费使用中国知网？
https://www.zhihu.com/question/20188973/answer/142225168
论文神网站
https://www.zhihu.com/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell Programming</title>
<link href="/b/c/shell-" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/chap37.html</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-init</title>
<link href="/b/c/ops-init" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# init

## init
init指linux 系统运行级runlevel 0~6. 可在/etc/inittab中指定:

	id:3:initdefault:


##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>收集了下UI 动画特效</title>
<link href="/b/ui/ui-animation" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2019-02-09T00:00:00Z</published>
<content># UI 动画特效
https://medium.com/@ann.green/loading-indicators-e9d9ac9680b

# Materia UI 
https://materi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js dom file</title>
<link href="/b/ria/js-dom-file" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2019-07-05T00:00:00Z</published>
<content># Focus

    var isFocused = (document.activeElement === dummyEl);
    ele.focus()

# FormData

## i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-func</title>
<link href="/b/py/py-func" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

函数式编程

# call func
getattr(foo, 'bar')()
locals()['bar']()
globals()['bar']()

## access </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js 的函数</title>
<link href="/b/ria/js-func" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2017-07-11T00:00:00Z</published>
<content># async
## generator
    function* foo() {
        yield 11
        return 22;//没用
    }
    f=foo()</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/js-css-layout" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># CSS 布局
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-async-iter</title>
<link href="/b/py/py-async-iter" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
http://nvie.com/posts/iterators-vs-generators/

## Iterable, 迭代器,

### has(next)
    &gt;&gt;&gt; a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-admin" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
    rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre User and Authentication</title>
<link href="/b/db/postgre-admin-user" rel="alternate" type="text/html"/>
<updated>2019-07-03T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre User and Authentication
vim /var/lib/pgsql/10/data/pg_hba.conf

    host    all           </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Node argv</title>
<link href="/b/ria/node-argv" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2019-06-25T00:00:00Z</published>
<content># Node argv

    #!/usr/bin/env node
    // print process.argv
    process.argv.forEach(function (va</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Socket.io</title>
<link href="/b/ria/js-websocket" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Socket.io
ws 和 wss 均为 WebSocket 协议的 schema，一个是非安全的，一个是安全的tcp + ws as ws，tcp + tls + ws as wss 
Soc</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2019-06-29T00:00:00Z</published>
<content># Object

## isEempty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Objec</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>html5</title>
<link href="/b/ria/js-dom-html5" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2019-06-29T00:00:00Z</published>
<content># Tag

## Forms
属性

    enctype="multipart/form-data"
        default content-type: application/x-ww</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug-pdb</title>
<link href="/b/py/py-debug-pdb" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- pdb 相当于是c里面的gdb
- ipdb：之于pdb, 相当于ipython 之于python. 
    1. 相对pdb 增加了高亮、tab  
    2. p (p</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>关于直播的P2P架构</title>
<link href="/b/course/im-live-p2p" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2018-08-23T00:00:00Z</published>
<content># 关于直播的P2P架构
现在的直播大多都是中心化的CDN 架构，首先是主播RTMP 推流到CDN 服务器，然后用户从通过次级CDN 链路拉流。

这种架构最成熟稳定，但是成本巨大。直播本身和聊天一样</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 环境变量</title>
<link href="/b/c/shell-var-env" rel="alternate" type="text/html"/>
<updated>2019-06-29T00:00:00Z</updated>
<summary/>
<published>2018-10-08T00:00:00Z</published>
<content># Variable

	let num++
	let ++num

	declare -i num
	num+=1

	((num++))

## unset export
    unset FO</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 字典</title>
<link href="/b/py/py-var-dict" rel="alternate" type="text/html"/>
<updated>2019-07-05T00:00:00Z</updated>
<summary/>
<published>2019-07-05T00:00:00Z</published>
<content># Dict

    key='city'
	dic = {'x': 1, 'y': 2, 2:100, key:'bj'}
	del dict['x']
    dict.pop(2) # key</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-process</title>
<link href="/b/py/py-process" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
- sh: sh之于subprocess， 相当于requests 对于urllib2
	1. sh.ls("-l", "/tmp", color="never")
	2. sh.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 语法</title>
<link href="/b/py/py-grammar" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2018-03-01T00:00:00Z</published>
<content># compare
```s
&gt;&gt;&gt; 1&lt;3&gt;=3&gt;1==1&lt;100
True
```


# Condition &amp; Loop

## try finnaly

    try:
        1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-async-iteratortools</title>
<link href="/b/py/py-async-iteratortools" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数。

# itertools
itertools模块提供的全部是处理迭代功能的函数，它们的返回值不是</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang-pkg</title>
<link href="/b/go/2.go-pkg" rel="alternate" type="text/html"/>
<updated>2019-07-07T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 结构
1. 参考How to Write Go Code https://golang.org/doc/code.html

2. 环境变量$ go env

## workspace
可以有多个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>english punctuation</title>
<link href="/b/eng/eng-punctuation" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># English punctuation
https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6

	punctuation mark	n</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre Geo</title>
<link href="/b/db/postgre-geo" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2019-06-24T00:00:00Z</published>
<content># Postgre Geo

    $ select st_force2d(geom) from table_name limit 100
    $ \d table_name
    id   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>React Start</title>
<link href="/b/ria/react-start" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2019-06-23T00:00:00Z</published>
<content># React Runtime
React 运行时，需要引入运行时

## CDN runtime
阮一峰的demo 中的例子

    &lt;head&gt;
        &lt;meta charset="U</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>command</title>
<link href="/b/ria/node-npm" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># command

    npm list -g; # global
    npm list; # local
    npm dedupe -g; # Reduce duplication

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的list/tuple 笔记</title>
<link href="/b/py/py-var-list" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># list and tuple
因为tuple 是增加删除元素的不可变的list(数据可以变)，所以代码更安全。
如果可能，能用tuple代替list就尽量用tuple。

	list = [1,2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>at happens when the listen backlog is full?</title>
<link href="/b/net/net-tcp-backlog" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2019-06-23T00:00:00Z</published>
<content>What happens when the listen backlog is full?

https://www.youtube.com/watch?v=6pK0tz1ifiY</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux ssh tool</title>
<link href="/b/net/net-ssh-tool" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2016-09-09T00:00:00Z</published>
<content># SSH Client

## config
以下 `~/.ssh/config` 包含了可以避免在特定网络环境中连接被断掉的情况的设置、使用压缩（这对于通过低带宽连接使用 scp 很有用），以及使</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSH SERVER</title>
<link href="/b/net/net-ssh-server" rel="alternate" type="text/html"/>
<updated>2019-06-23T00:00:00Z</updated>
<summary/>
<published>2019-06-23T00:00:00Z</published>
<content># SSH SERVER
OpenSSH Installations under CentOS Linux

	# To install the server and client type:
	yu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssh proxy</title>
<link href="/b/net/net-ssh-proxy" rel="alternate" type="text/html"/>
<updated>2019-06-25T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># ssh proxy

    -f Rquests ssh to go to background just before command execution.

## tcp port forw</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Posgtre Var</title>
<link href="/b/db/postgre-var" rel="alternate" type="text/html"/>
<updated>2019-06-22T00:00:00Z</updated>
<summary/>
<published>2019-06-20T00:00:00Z</published>
<content># Posgtre Var
## Define and assign
    DECLARE vSite varchar DEFAULT 'TechOnTheNet.com';
    DECLARE</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>PG help</title>
<link href="/b/db/postgre-help" rel="alternate" type="text/html"/>
<updated>2019-06-22T00:00:00Z</updated>
<summary/>
<published>2019-06-20T00:00:00Z</published>
<content># PG help

    \h
    \?

show function

    \sf[+]  FUNCNAME       show a function's definition
   </content>
</entry></feed>