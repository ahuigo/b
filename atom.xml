<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-03-13T16:48:46Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>command</title>
<link href="/b/ria/node-npm" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># command

    npm list -g; # global
    npm list; # local
    npm dedupe -g; # Reduce duplication

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库CAP 理论 与事务</title>
<link href="/b/arch/arch-cap" rel="alternate" type="text/html"/>
<updated>2019-03-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (所有节点在同一时</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>rpc</title>
<link href="/b/rpc/rpc" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># RPC
&gt; http://www.cnblogs.com/fxjwind/archive/2013/05/16/3082219.html
&gt; 深入浅出RPC原理
https://ketao1989</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>server</title>
<link href="/b/py/py-aiohttp-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># server
异步编程要小心循环阻塞, 不可以使所有任务task被阻塞的函数：
1. time.sleep(10)

## simple server

    from aiohttp impo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Django Notes</title>
<link href="/b/py/django" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2019-03-11T00:00:00Z</published>
<content># Models
## raw sql

    &gt;&gt;&gt; lname = 'Doe'
    &gt;&gt;&gt; first_person = Person.objects.raw('SELECT * FROM </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>各种语言的fiddle</title>
<link href="/b/c/ops-fiddle" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-08-27T00:00:00Z</published>
<content># 各种语言的fiddle
各种语言的fiddle
1. js:
    https://ahuigo.github.io/a/demo/fiddle/fiddle.html # 加上`data:te</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/tree-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>node 系统相关</title>
<link href="/b/ria/node-os" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># node 系统相关

    global.process === process 

## shell child process

    const execSync = require('</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># JS Promise
实现异步串行写法
1. generator
1. Promise: resove-then, reject-catch
2. async-await: 
    1. syn</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>webspider</title>
<link href="/b/py/py-webspider" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># webspider
Python 3网络爬虫开发实战 
https://germey.gitbooks.io/python3webspider/1.2.2-Selenium%E7%9A%84%E5</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-test</title>
<link href="/b/py/py-test" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
test framework list:
- pytest   比unittest 好的一点是：可以选择测试范围
- unittest 单元测试, py-unittest
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>metaclass</title>
<link href="/b/py/py-obj-meta" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># metaclass
通过元类，我们可以实例元类 创建类

## issue
python 解析class 时，会对参数(包括obj)做预处理。预处理的参数不再接受修改

    i = 1
   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx upstream, 负载均衡</title>
<link href="/b/nginx/nginx-upstream" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># nginx upstream, 负载均衡
定义一组服务器， UNIX/TCP 可以 混合使用

	语法:	upstream name { ... }
	默认值:	—
	上下文:	http

ups</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Redis</title>
<link href="/b/db/redis-" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Redis
redis所有的数据都是redisObject存储的。redisObject来表示所有的key/value数据是比较浪费内存的(为了支持各种数据类型嘛)，还好redis 作者也考虑了很</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/tree-skiplist" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-server</title>
<link href="/b/py/py-server" rel="alternate" type="text/html"/>
<updated>2019-03-12T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
参考：https://zhuanlan.zhihu.com/p/30056870

## CGI
原始的CGI 程序只是单纯的多进程fork 模式[/demo/py/socket-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>asyncio</title>
<link href="/b/py/py-asyncio" rel="alternate" type="text/html"/>
<updated>2019-03-10T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># asyncio
asyncio是基于coroutine 的，包括了:
1. 事件循环(event loop)
2. Task: 对coroutine 的封装，包含各种状态
    1. Pendi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>does-a-thread-waiting-on-io-also-block-a-core?</title>
<link href="/b/py/py-async-cpu" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># does-a-thread-waiting-on-io-also-block-a-core
&gt; Refer to: https://stackoverflow.com/questions/3568</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c 语言之指针</title>
<link href="/b/c/c-pointer" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
关于指针有两种运算符：*号是指针间接寻址运算符（Indirection Operator），*pi表示取指针pi所指向的变量的值，也称为Dereference操作. &amp;运算符的操作</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c lib 库</title>
<link href="/b/c/c-lib" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface
在[c 编译](/p/c-compile) 中我提到了c 的标准库，c标准库包括: header(.h 文件)头文件，和lib（.c）库文件。
大多数库函数在libc 中, 本笔记</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 之 编译</title>
<link href="/b/c/c-compile" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># Preface

本文总结关于c 编译的基础用法: 宏，头文件

# include 头文件
公共的东西(External 声明，定义)，可以放到头文件中：`*.h`, 可以被多次引用（其实跟`.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2019-03-08T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2019-03-08T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>查找两有序数组中第N 大的值</title>
<link href="/b/algorithm/algorithm-find-the-nth-of-2-sorted-array" rel="alternate" type="text/html"/>
<updated>2019-03-07T00:00:00Z</updated>
<summary/>
<published>2016-09-26T00:00:00Z</published>
<content># 查找两有序数组中第N 大的值
问题:
&gt; A B 两个递增有序数组, 将两数组中的元素合并到一起。请找到其中第N大的数

Find the n'th max number of 2 sorted </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Chrome devtools 使用汇总</title>
<link href="/b/ria/js-debug-chrome" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># Chrome devtools 使用汇总
chrome://chrome-urls/

## Network dns
- Dns Cache
chrome://net-internals/#dns</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>图的路径问题</title>
<link href="/b/algorithm/graph-path" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-02-17T00:00:00Z</published>
<content># 图的路径问题
主要包含这么几个问题
1. 最短路径
2. 一笔画问题
    1. 一笔画的充要条件：奇顶点（连接的边数量为奇数的顶点）的数目等于0(任意起点)或者2(奇顶点为起点)
    2.</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>解决Vscode 中文输入法乱入的Backspace 字符</title>
<link href="/b/vsc/vsc-ime" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-08-17T00:00:00Z</published>
<content># 解决Vscode 中文输入法乱入的Backspace 字符
vscode 下的中文输入法老键入 backspace controller character(`\u0008`, `\u0003`)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/net/net-tcpip" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Linux Network Tool</title>
<link href="/b/net/3.net-tool" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2016-10-20T00:00:00Z</published>
<content># Linux Network Tool
网络相关的工具有:

	dns: ip 或 ifconfig，dig
	monitor: netstat -lntp 或 ss -plat
	socket: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python PIL(pillow)</title>
<link href="/b/py/py-pil" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用。

由于PIL仅支持到Pytho</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ssl(https)</title>
<link href="/b/nginx/nginx-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ssl(https)

	server {
		listen 80;
		listen 443 default_server ssl;#加ssl 时会自动开启ssl, 不能再加 ssl on;

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl</title>
<link href="/b/net/net-ssl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
参考阮一峰的[ssl运行机制]，TLS/SSL 基于非对称加密，它解决了以下风险：

1. 窃听风险(eavesdropping): 通过私钥加密避免第三方窃取风险
2. 篡改风险</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSL Certificate Authority(CA)</title>
<link href="/b/net/net-ssl-ca" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content># 证书级别
http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html

# SNI(SSL/TLS Server </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2019-03-06T00:00:00Z</published>
<content>
# curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python thread 线程笔记</title>
<link href="/b/py/py-thread" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2019-03-05T00:00:00Z</published>
<content># threading
Python的标准库提供了两个模块：`_thread`和`threading`: `_thread`是低级模块，threading是高级模块，对_thread进行了封装。

绝</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-http</title>
<link href="/b/py/py-http" rel="alternate" type="text/html"/>
<updated>2019-03-06T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# urllib
urllib2 is deprecated, use requests instead , except: `urllib.parse.urlsplit/url</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>背单词</title>
<link href="/b/eng/eng-word" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># my method
## 单词
1. 盲读
2. 不会的单词划线
3. 结合context 推断
    4. 查词：音标 本文中含义
4.记忆：
   1. 音形义 :连读 弱读 强读 音变
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>写论文要用到的网站</title>
<link href="/b/em/em-paper" rel="alternate" type="text/html"/>
<updated>2019-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 写论文要用到的网站
## 参考文献格式生成
https://www.bigan.net/reference/

## 查重
https://www.paperyy.com/
http://www.</content>
</entry></feed>