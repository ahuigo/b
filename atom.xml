<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-08-12T17:49:36Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>Js dom 笔记</title>
<link href="/b/ria/js-dom" rel="alternate" type="text/html"/>
<updated>2020-08-12T00:00:00Z</updated>
<summary/>
<published>2016-01-23T00:00:00Z</published>
<content># Js dom 笔记
    document.documentElement ;//html
    document.body;  //html

# Device
## Navigator
n</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>netcat</title>
<link href="/b/net/net-ncat" rel="alternate" type="text/html"/>
<updated>2020-08-12T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># netcat,
[nc](http://www.oschina.net/translate/linux-netcat-command?p=2#comments)

# nc
Netcat 或者叫 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js ajax legacy</title>
<link href="/b/ria/js-ajax-legacy" rel="alternate" type="text/html"/>
<updated>2020-08-09T00:00:00Z</updated>
<summary/>
<published>2020-08-09T00:00:00Z</published>
<content># js ajax legacy

## prototype
	var xhr=new XMLHttpRequest();
    xhr.onload=function(ProgressEvent)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go Sync.Pool</title>
<link href="/b/go/go-sync-pool" rel="alternate" type="text/html"/>
<updated>2020-08-09T00:00:00Z</updated>
<summary/>
<published>2019-10-02T00:00:00Z</published>
<content># Go sync.Pool
出于性能的考虑，我们经常需要建立：buffer池，连接池。sync.Pool 可以帮助我们这到这点：
1. 通过Get() 取资源
1. 通过Put() 把不用的资源放回</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre User and Authentication</title>
<link href="/b/db/pg-ddl-user" rel="alternate" type="text/html"/>
<updated>2020-08-09T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help
    \h alter
    ALTER ROLE name RENAME TO new_name

# Postgre User and Authentication
找到pg_h</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Sed 简记</title>
<link href="/b/c/ops-sed" rel="alternate" type="text/html"/>
<updated>2020-08-09T00:00:00Z</updated>
<summary/>
<published>2020-08-09T00:00:00Z</published>
<content># sed 与gsed
grep 与sed 同样是以按行匹配，不过sed 不仅能按行匹配，还能替换字符

&gt;ps: mac 下的sed与linux下的gnu sed有很大的不同，建议安装gsed（如果</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/go-array-slice" rel="alternate" type="text/html"/>
<updated>2020-08-12T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vim Edit</title>
<link href="/b/vim/vim-edit" rel="alternate" type="text/html"/>
<updated>2020-08-05T00:00:00Z</updated>
<summary/>
<published>2019-05-29T00:00:00Z</published>
<content># vim的编辑模式
vim 支持的模式很多：
1. normal 正常模式（大部分时间都是处于这个模式），这个模式下支持丰富的[光标移动命令如hjkl wbe](/p/vim/vim-motion)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>设置系统的PATH</title>
<link href="/b/c/ops-init-path" rel="alternate" type="text/html"/>
<updated>2020-08-05T00:00:00Z</updated>
<summary/>
<published>2019-01-06T00:00:00Z</published>
<content>如果想在进入系统时设置PATH, 在这里设置

    /etc/paths
    /etc/profile
    /etc/bashrc
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/go-var" rel="alternate" type="text/html"/>
<updated>2020-08-04T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># Variables
The var statement declares a list of variables

	var c, python, java bool
	var i int
	fm</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>map</title>
<link href="/b/go/go-var-map" rel="alternate" type="text/html"/>
<updated>2020-08-06T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># map

## define map
键必须是⽀支持相等运算符 (==、!=) 类型，⽐比如 number、string、 pointer、array、struct，以及对应的 interface</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2020-08-02T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

vim 下的光标移动

    按字符移动 hjkl
    按单词移动 
        小单词:</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 时间函数的用法笔记</title>
<link href="/b/py/py-time" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2018-04-02T00:00:00Z</published>
<content># time 工具
time 提供基本的时间，sleep

	import time
	time.time()
		19972314124.05238
        time.localetime(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 性能分析</title>
<link href="/b/py/py-profiler" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python 性能分析
介绍几个分析工具：
- cProfile
类似于xdebug cachegrind profiler 性能画像
- py-spy python 版的top
    - py</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-file-io</title>
<link href="/b/py/py-file-io" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# flush buffer
开启buffer 后，默认是换行才flush, print 调用的就是sys.stdout

    # mac测试后：不一定有效
    PYTH</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Mac shortcuts</title>
<link href="/b/mac/mac-shortcuts" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2020-08-02T00:00:00Z</published>
<content>
# mac 快捷键使用整理

## Karabiner + Seil, 定制全键盘
一开始是左手手指有点酸，估计是尾指按键盘左边的Ctrl键次数有点多，为此把左边的Ctrl键盘跟CapsLock对换</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>brew</title>
<link href="/b/mac/mac-brew" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># brew
- brew(Homebrew) 是近来极流行的 安装gawk,gsed,macvim等命令的安装工具，所有的包都被安装到/usr/local/Cellar下，然后再以`ln -s` 软</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/pg-ddl-install" rel="alternate" type="text/html"/>
<updated>2020-08-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理

## intall
centos:

    yum install postgresql-server postgresql-contrib -y
    s</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 终端使用技巧</title>
<link href="/b/c/shell-zsh" rel="alternate" type="text/html"/>
<updated>2020-08-05T00:00:00Z</updated>
<summary/>
<published>2020-08-05T00:00:00Z</published>
<content># Preface
本文总结了shell 终端的使用技术: 主要包括Readline 使用，以及zsh 与iTerm2 的使用

# Shortcuts
下面列出的快捷键大部分是通用的，有一小部分快捷</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2020-07-29T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2020-07-29T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang help</title>
<link href="/b/go/11.go-help" rel="alternate" type="text/html"/>
<updated>2020-07-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help command
Use "go help [command]" for more information about a command.

    go help fmt

# go </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js dom file</title>
<link href="/b/ria/js-dom-file" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2020-07-25T00:00:00Z</published>
<content># Focus

    var isFocused = (document.activeElement === dummyEl);
    ele.focus()

# FormData

## i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines 与原子</title>
<link href="/b/go/go-atom-string" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2020-07-18T00:00:00Z</published>
<content># golang 原子问题

## 问题发现的过程
字节的同学在[踩坑记： Go 服务灵异 panic](v2ex.com/t/691145)提到，json 序列化字符串经常遇到 nil addres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2020-07-25T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 标准管道输入输出

	#with stdout(cmd get double stdout); stdout pi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-lsof</title>
<link href="/b/c/ops-process-lsof" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># lsof: list open file
[/p/linux-process-lsof](/p/linux-process-lsof)

List Open File. 比如查看所有打开file </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c-io-buffer</title>
<link href="/b/c/c-io-buffer" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
在标准I/O库中提供缓冲的主要目的就是减少系统函数read和write的调用，从而能够减少系统CPU时间。标准I/O库的缓冲主要分为3种：全缓冲、行缓冲和不缓冲。

    全缓冲</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c-debug-gdb</title>
<link href="/b/c/c-debug-gdb" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 启动gdb
- First, let excute file records Source file a.c via gcc parameter "-g"

	gcc -g a.c

- Seco</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>coredump</title>
<link href="/b/c/c-debug-coredump" rel="alternate" type="text/html"/>
<updated>2020-07-25T00:00:00Z</updated>
<summary/>
<published>2020-07-25T00:00:00Z</published>
<content># Preface

1. 前言: 有的程序可以通过编译, 但在运行时会出现Segment fault(段错误). 这通常都是指针错误引起的. 但这不像编译错误一样会提示到文件-&gt;行, 而是没有任何信</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vscode markdown-preview-enhanced example</title>
<link href="/b/vsc/vsc-markdown" rel="alternate" type="text/html"/>
<updated>2020-07-23T00:00:00Z</updated>
<summary/>
<published>2020-07-22T00:00:00Z</published>
<content># vsc markdown 
&gt; https://shd101wyy.github.io/markdown-preview-enhanced/

# draw
## 流程图 mermaid
```m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>security-web</title>
<link href="/b/sec/security-web" rel="alternate" type="text/html"/>
<updated>2020-07-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface


# click-jacking vulnerability

## opacity

	&lt;a href="http://example.com/attack.html" sty</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-test</title>
<link href="/b/go/go-test" rel="alternate" type="text/html"/>
<updated>2020-07-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
Go has a lightweight test framework composed of the go test command and the testing packag</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 线程</title>
<link href="/b/c/c-thread" rel="alternate" type="text/html"/>
<updated>2020-07-23T00:00:00Z</updated>
<summary/>
<published>2020-07-23T00:00:00Z</published>
<content># Preface
每个进程在自己独立的地址空间运行，进程间共享数据需要通过nmap 或者 进程间通信机制。
而线程可以*一个进程的地址空间内执行多个控制流程*。有些情况下需要一个进程执行多个控制流程</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Niz 键盘的配置</title>
<link href="/b/mac/keyboard" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2020-05-08T00:00:00Z</published>
<content># 键盘
看上两款键盘:
1. HHKB-Pro2，是一款电脑键盘，重量0.53kg， 长29.4 x 宽11.0 x 高39.9mm 。
2. Niz Atom68 31.9*11.0

考虑到了h</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/css-layout" rel="alternate" type="text/html"/>
<updated>2020-07-23T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># 参考
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a blo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines</title>
<link href="/b/go/go-routines" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># go routines
A goroutine is a `lightweight thread` managed by the Go runtime.

execution of f happe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines 与原子</title>
<link href="/b/go/go-routines-atom" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2020-07-18T00:00:00Z</published>
<content># golang 原子问题

## 问题发现的过程
字节的同学在[踩坑记： Go 服务灵异 panic](v2ex.com/t/691145)提到，json 序列化字符串经常遇到 nil addres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Interfaces</title>
<link href="/b/go/16.go-interface" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Interfaces
Interface：
1. Interface 可以用来模拟泛型，但是是运行时模拟，没有编译时快
1. method 没有 public protecte..., 如果要被其</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-ps</title>
<link href="/b/c/ops-process-ps" rel="alternate" type="text/html"/>
<updated>2020-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# processe status
linux上进程有5种状态:

1. 运行(正在运行或在运行队列中等待)
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)
3</content>
</entry></feed>