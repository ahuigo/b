<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-09-08T14:47:22Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>创业者社保</title>
<link href="/b/proj/shebao" rel="alternate" type="text/html"/>
<updated>2019-09-08T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># 15年
已到退休年龄，但社保没有缴够15年怎么办？
https://zhuanlan.zhihu.com/p/52324711
在北京社保缴满15年，是否就可以在京领取养老待遇？
https://</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>install java</title>
<link href="/b/java/java-install" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># install java
    JRE： Java Runtime Environment
    JDK：Java Development Kit 
    JDK = JRE(JVM)+ja</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js 字符串大全</title>
<link href="/b/ria/js-str" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2015-03-15T00:00:00Z</published>
<content># Js 字符串大全
字符定义与python 一样, 而且不区分双引号：

    '\x00' == '\u0000'
	'\x31' == "\x31"

	'好' === '\u597D' //</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 时间函数的用法笔记</title>
<link href="/b/py/py-time" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-04-02T00:00:00Z</published>
<content># time 工具
time 提供基本的时间，sleep

	import time
	time.time()
		19972314124.05238
        time.localetime(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 的索引</title>
<link href="/b/db/postgre-index" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre Index
本文主要围绕postgre 总结一下索引, 参考：[PostgreSQL 9种索引的原理和应用场景](https://yq.aliyun.com/articles/11</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines</title>
<link href="/b/go/18.go-routines" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># go routines
A goroutine is a `lightweight thread` managed by the Go runtime.

execution of f happe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Interfaces</title>
<link href="/b/go/16.go-interface" rel="alternate" type="text/html"/>
<updated>2019-09-05T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Interfaces
Interface：
1. Interface 可以用来模拟泛型，但是是运行时模拟，没有编译时快
1. method 没有 public protecte..., 如果要被其</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/postgre-crud" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre CRUD
## string or keyword
    select 'string';
    select "count"(1) from "table_name"

##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>CSS 笔记</title>
<link href="/b/ria/js-css" rel="alternate" type="text/html"/>
<updated>2019-09-05T00:00:00Z</updated>
<summary/>
<published>2017-12-12T00:00:00Z</published>
<content># CSS 笔记
css/html5/js 兼容表
http://caniuse.com/

# priority

	style &gt; id &gt; hover(鼠标悬停) &gt; class &gt; tag
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/js-css-layout" rel="alternate" type="text/html"/>
<updated>2019-09-07T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># CSS 布局
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell proxy tool</title>
<link href="/b/net/net-proxy-tool" rel="alternate" type="text/html"/>
<updated>2019-09-01T00:00:00Z</updated>
<summary/>
<published>2019-09-01T00:00:00Z</published>
<content># Android
HowTo: Proxy Non-Proxy-Aware Android Applications through Burp
http://blog.dornea.nu/2014/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Math</title>
<link href="/b/ria/js-math" rel="alternate" type="text/html"/>
<updated>2019-08-30T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Math

	E	返回算术常量 e，即自然对数的底数（约等于2.718）。
	LN2	返回 2 的自然对数（约等于0.693）。
	LN10	返回 10 的自然对数（约等于2.302）。
	LOG</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2019-08-30T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int; b string}
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/7.go-var" rel="alternate" type="text/html"/>
<updated>2019-09-01T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># go print
## println
只能用于string, int..

    # no need import fmt
    println(xyz)

## fmt.Println
a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>React Build</title>
<link href="/b/ria/react-build" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># React Build

## babel
babel 使用`react-app/prod` 编译jsx

    npm i babel
    npx babel --watch src --</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>node 的npx 是什么？</title>
<link href="/b/ria/node-npx" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-08-20T00:00:00Z</published>
<content># node 的npx 是什么？
&gt; http://www.ruanyifeng.com/blog/2019/02/npx.html

以前我们要手动输入路径:

    ./node_modules</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS comporess</title>
<link href="/b/ria/js-compress" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># JS compress 
https://blog.bitsrc.io/10-javascript-compression-tools-and-libraries-for-2019-f141a0b</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac 工具集</title>
<link href="/b/mac/mac-tool" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-10-10T00:00:00Z</published>
<content># Preface
本文是我所用的mac 工具集大杂烩。

一些mac osx 能做而linux 桌面级OS 目前不能做的事情：

- mac 支持全局readline , 字符编辑的效率非常非常高(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js ajax legacy</title>
<link href="/b/ria/js-ajax-legacy" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># js ajax legacy

## prototype
	var xhr=new XMLHttpRequest();
    xhr.onload=function(ProgressEvent)</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-09-01T00:00:00Z</updated>
<summary/>
<published>2019-09-01T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vsc for python</title>
<link href="/b/vsc/vsc-python" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Vsc for python
https://code.visualstudio.com/docs/python/python-tutorial

## go to denifition
1. 安</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js-time</title>
<link href="/b/ria/js-time" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Date Format
&gt; https://zh.wikipedia.org/wiki/ISO_8601

The only format in the spec is a simplified </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># Object

## isEmpty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Object</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Event</title>
<link href="/b/ria/js-dom-event" rel="alternate" type="text/html"/>
<updated>2019-09-01T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Event

## DOM MutationObserver
http://javascript.ruanyifeng.com/dom/mutationobserver.html

### DOM</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2019-09-05T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 递归promise
Promise 是递归的，Reject 不是

    const onResolved = e =&gt; console.log('resolve , ', e );
    c</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
## throw any type
    throw "string"
    throw {message:"msg"}
    e = Error('msg')
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang fmt</title>
<link href="/b/go/6.go-fmt" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># fmt

- fmt.Println : space, with newline
- fmt.Print : without newline
- fmt.Printf : format

prin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2019-09-03T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg的使用</title>
<link href="/b/go/2.go-pkg" rel="alternate" type="text/html"/>
<updated>2019-09-01T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 结构
1. 参考How to Write Go Code https://golang.org/doc/code.html

2. 环境变量$ go env

## workspace
可以有多个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-datatype</title>
<link href="/b/db/mysql-var" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Data Type(数据类型)

	NULL means you do not have to provide a value for the field... default to null
	</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-time</title>
<link href="/b/db/mysql-time" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Time Type
精确到微秒

    TIME(6), DATETIME(6), TIMESTAMP(6)

# Format Convert Time

## select now(),sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Result

    | id | status |
    +----+--------+
    |  1 | A      |
    update test5 set status = </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 编程</title>
<link href="/b/c/shell-" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming
Shell 编程笔记

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/</content>
</entry></feed>