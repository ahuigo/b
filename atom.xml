<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2018-12-31T16:49:13Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>防火墙</title>
<link href="/b/net/net-iptables" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-12-31T00:00:00Z</published>
<content># 原理
参考[Iptables防火墙原理详解](http://segmentfault.com/a/1190000002540601)

## netfilter/iptables
Netfilte</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Linux Network Tool</title>
<link href="/b/net/3.net-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-10-20T00:00:00Z</published>
<content># Linux Network Tool
网络相关的工具有:

	dns: ip 或 ifconfig，dig
	monitor: netstat -lntp 或 ss -plat
	socket: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>latex 数学公式</title>
<link href="/b/math/math-latex" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-12-31T00:00:00Z</published>
<content># Preface
数学公式：
- [latex 数学公式](http://zh.wikipedia.org/wiki/Help:%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>红包飞的概率问题</title>
<link href="/b/math/math-envelope" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2015-03-04T00:00:00Z</published>
<content># 红包飞的概率问题
100元的红包，分给10个人，每个人得的数额是随机的。请设计一个公平的算法，保证每个人得到的金额从数学期望上是相等的。

# 生成红包时就拆分好

## 此时生成10个随机数作权</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>英语的否定</title>
<link href="/b/eng/s/1.not" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># 句子
&gt; 本文是eng-sentence-complex.md 的补充

英语里面的否定和中文的是不一样的

    1. I do not know all of them.
    误：对他们</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tool</title>
<link href="/b/c/ops-user" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># tool
last #显示最后登录者
who #显示当前登录者
w：谁登录进来了
id：用户/组身份信息

# su

    su -c 'whoami' - root
    /bin/su </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>OM(Operation Maintenance) 运维工具</title>
<link href="/b/c/ops-tool" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 运维工具
OM(Operation Maintenance) 运维工具

1. Bootstrapping： Kickstart、Cobbler、rpmbuild/xen、kvm、lxc</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Systemd</title>
<link href="/b/c/ops-systemd" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Systemd
使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。

	$ systemctl -</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python shell 子进程</title>
<link href="/b/py/py-shell" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python shell 子进程
很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。

subprocess模块可以让我们非常方便地启动一个子进程，然</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>字符编码简介</title>
<link href="/b/code/code-character" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2014-05-10T00:00:00Z</published>
<content># 字符编码简介
本文试图理清字符编码系统的整体结构.如有理解不对请指正.

# 字符编码
按照[现代的编码模型],字符编码的主要概念分为：有哪些字符(字符表)、它们的编号(编码字符集)、这些编号如何</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>全屏</title>
<link href="/b/c/ops-virtualbox" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 网络

## Vitual Machine share network
- Internal（内网模式）: 
  只限VM 之间访问，不能访问主机和外网
- NAT: 
  VM --虚拟的NAT</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>傅里叶变换</title>
<link href="/b/algorithm/algorithm-fourier" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2015-09-26T00:00:00Z</published>
<content># 傅里叶变换

今天看到一篇韩昊写的好文 [傅里叶分析之掐死教程](http://zhuanlan.zhihu.com/wille/19763358)，生动形象的讲解了傅里叶的本质： 将时域变换到频</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql explain 的使用</title>
<link href="/b/db/mysql-index-explain" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Mysql Explain 的使用

## show index

	show index from table_name;

## explain
用explain 获取mysql 如何quer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql ddl</title>
<link href="/b/db/mysql-ddl" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Storage Engines

	mariadb&gt; show engines

mysql 下所有引擎的其表结构保存在`tb_name.frm` 中, 而数据结构在不同的引擎下，保存的文件有所不</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>如何生成全局id</title>
<link href="/b/db/mysql-ddl-id" rel="alternate" type="text/html"/>
<updated>2018-12-30T00:00:00Z</updated>
<summary/>
<published>2015-03-29T00:00:00Z</published>
<content># 如何生成全局id
1. 单点:
	1. mysql auto_increment
	2. redis incrnx
2. 分布:
	1. stepN: 可以部署N 台mysql, 每台机器生成的i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># database/table/column ddl crud

## database

	//create
	&gt; CREATE DATABASE dbName;
	$ mysqladmin cr</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据库</title>
<link href="/b/db/db-" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 数据库

## CAP定理（CAP theorem）
CAP定理（CAP theorem), 指出对于一个分布式计算系统来说，不可能同时满足以下三点:

1. 一致性(Consistency) (</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 之进程</title>
<link href="/b/c/ops-process" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Preface
本文总结下进程那些事儿

# PCB 进程控制块
linux 中每个进程都是由进程控制块(PCB) 控制的，PCB是一个task_struct 结构体。

- 进程id。系统中每个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/1.shell-var" rel="alternate" type="text/html"/>
<updated>2018-12-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>动态规划(Dynamic programing, DP)</title>
<link href="/b/algorithm/algorithm-dp" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 动态规划(Dynamic programing, DP)

动态规则(Dynamic programing, DP) 的大体思路是：将一个特定的问题，切割成若干类似的子问题，最后合并子问题的解并得</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>关于php的调试方法</title>
<link href="/b/php/2014-3-5-php-debug" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2015-09-11T00:00:00Z</published>
<content># PHP 调试方法

## 基本调试方法

### var_dump 与 二分法
相信大家确认问题点最常用的就是 以下函数结合二分法了：

	var_dump($var);

这种做法会导致一些问题</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Redis</title>
<link href="/b/db/redis-" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Redis
redis所有的数据都是redisObject存储的。redisObject来表示所有的key/value数据是比较浪费内存的(为了支持各种数据类型嘛)，还好redis 作者也考虑了很</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql lock</title>
<link href="/b/db/mysql-lock" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># 总线锁定和缓存一致性
&gt; 基于锁的原子操作 http://ifeve.com/inter-64-ia-32-8-1/
&gt; Java的多线程机制: 缓存一致性和CAS http://www.bdqn</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 索引</title>
<link href="/b/db/mysql-index" rel="alternate" type="text/html"/>
<updated>2018-12-29T00:00:00Z</updated>
<summary/>
<published>2018-12-29T00:00:00Z</published>
<content># Index Type
&gt; http://stackoverflow.com/questions/12813363/what-is-the-difference-between-a-candidat</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>跳跃表</title>
<link href="/b/algorithm/ds-skiplist" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2017-09-26T00:00:00Z</published>
<content># 跳跃表
我们实现redis 的有序集合用什么结构呢？
1. list: 插入的复杂度是O(n)
2. 链表: 查找的复杂度是O(n)

跳跃表(skiplist) 是一种随机化的数据结构，相当于为</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>二叉查找树和红黑树</title>
<link href="/b/algorithm/ds-binary-search-tree" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 二叉查找树
二叉查找树（Binary Search Tree），也称二叉搜索树、有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>数据结构之树</title>
<link href="/b/algorithm/algorithm-tree" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 数据结构之树

树状图是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：

1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>一个bloom filter 的redis实现</title>
<link href="/b/algorithm/algorithm-bloom-filter" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># 一个bloom filter 的redis实现	
问题:

&gt; 判断uid是否在一个uids集合中。假设uids集合有n=10^7(1k万)，同时假设uid最多10位，那么其值域范围是10^10(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>安全的帐号设计</title>
<link href="/b/sec/security-account" rel="alternate" type="text/html"/>
<updated>2018-12-20T00:00:00Z</updated>
<summary/>
<published>2018-12-20T00:00:00Z</published>
<content># Preface
帐号设计可以涉及到很多细节，本文主要从安全的角度作一个总结:

1. password 安全
1. sid 的设计
3. 内部Api 授权
4. SSO 单点登录

# passw</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>密码安全与签名安全</title>
<link href="/b/sec/sec-cryptography" rel="alternate" type="text/html"/>
<updated>2018-12-20T00:00:00Z</updated>
<summary/>
<published>2018-12-20T00:00:00Z</published>
<content># Signature, 签名
MAC(Message Authentication Code) 与 hash 的区别: http://stackoverflow.com/questions/2836</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2018-12-20T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>BFPRT 算法</title>
<link href="/b/algorithm/algo-topk" rel="alternate" type="text/html"/>
<updated>2018-12-20T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content># Topk 算法之BFPRT算法
基于最大/小堆的TopK 算法复杂度为 $O(n\log n)$

其实还有O(n)的算法 —— BFPRT 基于减治法，采用类似二分法的快排分区减低复杂度。

#</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>关于抢票以及12306 的票仓的sku 设计</title>
<link href="/b/news/ticketing-software" rel="alternate" type="text/html"/>
<updated>2018-12-20T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 为什么抢票这么难?
抢不到票其实太正常了，而且不是你刷的次数多你就有票，而是是你刷得快、带宽大、机器配置好才可能有票。
看看一下数据就知道抢票有多么的疯狂了。
1. 2018.1.12 [1230</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/js-css-layout" rel="alternate" type="text/html"/>
<updated>2018-12-19T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># CSS 布局
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Dependency Injector(IoC)</title>
<link href="/b/code/code-di-pattern" rel="alternate" type="text/html"/>
<updated>2018-12-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Dependency Injector(IoC)
依赖注入（Dependency Injection）又称控制反转（Inversion of Control）主要用来实现不同模块或类之间的解耦，可</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>吴恩达给你的人工智能第一课</title>
<link href="/b/ai/book-deeplearning" rel="alternate" type="text/html"/>
<updated>2018-12-19T00:00:00Z</updated>
<summary/>
<published>2018-09-26T00:00:00Z</published>
<content>学习观+ 超智能体
https://zhuanlan.zhihu.com/p/27857399

# 吴恩达给你的人工智能第一课
https://mooc.study.163.com/smartSpe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>egg model</title>
<link href="/b/ria/egg-model" rel="alternate" type="text/html"/>
<updated>2018-12-10T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># egg model
https://eggjs.org/zh-cn/tutorials/sequelize.html

1.config/plugin.js 中引入 egg-sequelize 插</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>人脑学习的本质</title>
<link href="/b/course/1.study" rel="alternate" type="text/html"/>
<updated>2018-12-24T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 学习的本质是什么？
&gt; YJango 在知乎专栏中开了关于机器学习的专栏，本篇是专栏读后有感。

机器学习的本质就是寻找输入(input) 与输出(output)之间关系的过程, 我们的大脑的也是</content>
</entry></feed>