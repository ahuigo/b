<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2020-04-24T17:28:43Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>install:</title>
<link href="/b/py/py-str-yaml" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># install:
    ```
    pip3 install pyyaml
    ```

# load
    ```
    &gt;&gt;&gt; import yaml
    &gt;&gt;&gt; a=yam</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的正则表达式</title>
<link href="/b/py/py-str-regex" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2020-04-23T00:00:00Z</published>
<content># regex 语法

	import re
    re.compile(pattern, [,modifier]).match(str)
    re.match(pattern, str[, m</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg 开发包</title>
<link href="/b/go/go-pkg-dev" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># golang write mod package
&gt; 下面的例子我放在了：https://github.com/ahuigo/go-lib/tree/master/import-local-mod</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>系统调用</title>
<link href="/b/go/go-os" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 系统调用
Go语言主要是通过两个包完成的。一个是os包，一个是syscall包

1. syscall里提供了什么Chroot/Chmod/Chmod/Chdir…，Getenv/Getgid/G</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-test</title>
<link href="/b/go/15.go-test" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
Go has a lightweight test framework composed of the go test command and the testing packag</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2020-04-23T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/pg-ddl-install" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理

## intall
centos:

    yum install postgresql-server postgresql-contrib -y
    s</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-ps</title>
<link href="/b/c/ops-process-ps" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# processe status
linux上进程有5种状态:

1. 运行(正在运行或在运行队列中等待)
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)
3</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-ftp-rsync</title>
<link href="/b/c/ops-ftp-rsync" rel="alternate" type="text/html"/>
<updated>2020-04-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# rsync

## rsync client

	rsync option source[source2 ... sourceN] destination
	rsync -a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 文件管理</title>
<link href="/b/c/ops-file" rel="alternate" type="text/html"/>
<updated>2020-04-19T00:00:00Z</updated>
<summary/>
<published>2020-04-19T00:00:00Z</published>
<content># Preface
本该讲述的是与shell 相关的 Linux文件管理

# ls

	ll -S 按文件大小排序
	ll -i 查看文件的inode

# find

	find [-H | -L</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 的语法</title>
<link href="/b/py/py-expr" rel="alternate" type="text/html"/>
<updated>2020-04-17T00:00:00Z</updated>
<summary/>
<published>2018-03-01T00:00:00Z</published>
<content># 多条件compare
多条件比较

    &gt;&gt;&gt; 5&lt;i&lt;100
    &gt;&gt;&gt; 1 &lt; 3 &gt;= 3 &gt; 1==1 &lt;100
    True

# 条件和循环

## try finnaly</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go log</title>
<link href="/b/go/go-log" rel="alternate" type="text/html"/>
<updated>2020-04-19T00:00:00Z</updated>
<summary/>
<published>2019-09-21T00:00:00Z</published>
<content># Go log

## log.Println
    import "log"
    log.Println("timeout of 5 seconds.", []string{"abc"})
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>管理包和依赖的工具。</title>
<link href="/b/py/py-pkg" rel="alternate" type="text/html"/>
<updated>2020-04-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 管理包和依赖的工具。

pip：Python 包和依赖关系管理工具。官网
pip-tools：保证 Python 包依赖关系更新的一组工具。官网
conda：跨平台，Python 二进制包管理工具</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>help</title>
<link href="/b/py/py-db-postgre" rel="alternate" type="text/html"/>
<updated>2020-04-14T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># help
http://initd.org/psycopg/docs/cursor.html

# psycopg2
## conn

    import psycopg2
    import</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>webspider</title>
<link href="/b/py/py-webspider" rel="alternate" type="text/html"/>
<updated>2020-04-13T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># webspider
Python 3网络爬虫开发实战 
https://germey.gitbooks.io/python3webspider/1.2.2-Selenium%E7%9A%84%E5</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/docker-begin" rel="alternate" type="text/html"/>
<updated>2020-04-13T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/css-layout" rel="alternate" type="text/html"/>
<updated>2020-04-10T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># 参考
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a blo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-func</title>
<link href="/b/py/py-func" rel="alternate" type="text/html"/>
<updated>2020-04-08T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

函数式编程

# call func
getattr(foo, 'bar')()
locals()['bar']()
globals()['bar']()

## exec fu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>css 布局</title>
<link href="/b/ria/js-css-layout" rel="alternate" type="text/html"/>
<updated>2020-04-09T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># CSS 布局
&gt; 参考: http://zh.learnlayout.com/position.html

# display
1. block: This makes the element a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2020-04-24T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. distu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2020-04-03T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>current status of China</title>
<link href="/b/life/covid-19" rel="alternate" type="text/html"/>
<updated>2020-04-03T00:00:00Z</updated>
<summary/>
<published>2020-04-03T00:00:00Z</published>
<content># current status of China
China has 829 million Internet users

# hideing cases?
Hide cases???
In Ch</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ina is only the first country to detect the virus. If the first country which detect and report the virus should responsible for it, then no country will report the virus.</title>
<link href="/b/life/covid-19-china" rel="alternate" type="text/html"/>
<updated>2020-04-03T00:00:00Z</updated>
<summary/>
<published>2020-04-03T00:00:00Z</published>
<content>China is only the first country to detect the virus. If the first country which detect and report th</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2020-03-31T00:00:00Z</updated>
<summary/>
<published>2020-03-31T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

    基本 hjkl
    单词 
        小单词wbe
            w: </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go 的变量</title>
<link href="/b/go/7.go-var" rel="alternate" type="text/html"/>
<updated>2020-04-19T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># go print
## println
只能用于string, int..

    # no need import fmt
    println(xyz)

## fmt.Println
a</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>map</title>
<link href="/b/go/7.go-var-map" rel="alternate" type="text/html"/>
<updated>2020-04-03T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># map

## define map
键必须是⽀支持相等运算符 (==、!=) 类型，⽐比如 number、string、 pointer、array、struct，以及对应的 interface</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 指针</title>
<link href="/b/go/13.go-pointer" rel="alternate" type="text/html"/>
<updated>2020-03-31T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Pointers
1. 支持指针类型 *T,指针的指针 **T,以及包含包名前缀的 `*&lt;package&gt;.T`。
2. 不能对指针做加减法等运算。
3. 默认是`nil`, 没有`NULL`

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim plug 插件系统</title>
<link href="/b/vim/nvim-plugin" rel="alternate" type="text/html"/>
<updated>2020-03-30T00:00:00Z</updated>
<summary/>
<published>2018-05-09T00:00:00Z</published>
<content># vim plug 插件系统

    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        ht</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Requests</title>
<link href="/b/py/py-aiohttp" rel="alternate" type="text/html"/>
<updated>2020-03-30T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Requests
Refer to: http://aiohttp.readthedocs.io/en/stable/tutorial.html#aiohttp-tutorial
```
impo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>server</title>
<link href="/b/py/py-aiohttp-server" rel="alternate" type="text/html"/>
<updated>2020-03-30T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># server
异步编程要小心循环阻塞, 不可以使所有任务task被阻塞的函数：
1. time.sleep(10)

## simple server

    from aiohttp impo</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2020-04-23T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># Golang Notes: struct
struct 是值类型，slice 是引用类型(指针), 以下赋值方法是按值的

    type A struct{x int; b string}
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang help</title>
<link href="/b/go/11.go-help" rel="alternate" type="text/html"/>
<updated>2020-03-30T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help command
Use "go help [command]" for more information about a command.

    go help fmt

# go </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg 开发包</title>
<link href="/b/go/2.go-pkg-dev" rel="alternate" type="text/html"/>
<updated>2020-04-13T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># gopath 结构
1. 参考How to Write Go Code https://golang.org/doc/code.html
2. 环境变量$ go env

## workspace</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>path</title>
<link href="/b/vsc/vsc-path" rel="alternate" type="text/html"/>
<updated>2020-03-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># path
Available variables which can be used inside of strings.

    // ${workspaceRoot}: the root f</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>hash</title>
<link href="/b/sec/sec-hash" rel="alternate" type="text/html"/>
<updated>2020-03-28T00:00:00Z</updated>
<summary/>
<published>2020-03-28T00:00:00Z</published>
<content># Preface

# hash in php
crc32() - Calculates the crc32 polynomial of a string
hash() - Generate a h</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2020-04-24T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2020-03-26T00:00:00Z</updated>
<summary/>
<published>2020-03-26T00:00:00Z</published>
<content># Object

## isEmpty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Object</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js 的函数</title>
<link href="/b/ria/js-func" rel="alternate" type="text/html"/>
<updated>2020-03-26T00:00:00Z</updated>
<summary/>
<published>2017-07-11T00:00:00Z</published>
<content># async
## generator
    function* foo() {
        yield 11
        return 22;//没用
    }
    f=foo()</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 性能分析</title>
<link href="/b/py/py-profiler" rel="alternate" type="text/html"/>
<updated>2020-03-26T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python 性能分析
介绍几个分析工具：
- cProfile
类似于xdebug cachegrind profiler 性能画像
- py-spy python 版的top
    - py</content>
</entry></feed>