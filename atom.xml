<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2019-08-18T14:20:23Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>防火墙</title>
<link href="/b/net/net-iptables" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># 原理
参考[Iptables防火墙原理详解](http://segmentfault.com/a/1190000002540601)

## netfilter/iptables
Netfilte</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-dns</title>
<link href="/b/net/net-dns" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># DNS 简介
主机名.次级域名.顶级域名.根域名

  host.sld.tld.root

  A记录：服务器 IP
  AAAA：服务器 IPv6 的地址。
  CNAME记录： 你空间商给您</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Mac shortcuts</title>
<link href="/b/mac/mac-shortcuts" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content>
# mac 快捷键使用整理

## Karabiner + Seil, 定制全键盘
一开始是左手手指有点酸，估计是尾指按键盘左边的Ctrl键次数有点多，为此把左边的Ctrl键盘跟CapsLock对换</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>语法总原则</title>
<link href="/b/eng/eng-sentence" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 语法总原则
怎样学好英语语法？
https://www.zhihu.com/question/24485886/answer/54300952
你有什么相见恨晚的英语学习方法
https://ww</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Gorm dialect</title>
<link href="/b/db/gorm-dialect" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-17T00:00:00Z</published>
<content># Gorm dialect
GORM 官方支持以下几种方言：sqlite, mysql, postgres, mssql.

当你创建一个新方言的时候，你必须实现 the dialect inter</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Sed 简记</title>
<link href="/b/c/ops-sed" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-18T00:00:00Z</published>
<content># sed 与gsed
grep 与sed 同样是以按行匹配，不过sed 不仅能按行匹配，还能替换字符

&gt;ps: mac 下的sed与linux下的gnu sed有很大的不同，建议安装gsed（如果</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Docker exec nsenter</title>
<link href="/b/arch/docker-exec" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2019-08-15T00:00:00Z</published>
<content># Docker exec nsenter
## nsenter工具进入docker容器
1. docker exec: 直接执行容器命令
2. docker attach: 类似exec, 但是多个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/10.go-slice-array" rel="alternate" type="text/html"/>
<updated>2019-08-17T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>gorm transaction</title>
<link href="/b/db/gorm-transaction" rel="alternate" type="text/html"/>
<updated>2019-08-17T00:00:00Z</updated>
<summary/>
<published>2019-08-17T00:00:00Z</published>
<content># gorm 事务
GORM 默认会将单个的 create, update, delete操作封装在事务内进行处理，以确保数据的完整性。

    tx := db.Begin()
    tx.Cr</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>CSS 笔记</title>
<link href="/b/ria/js-css" rel="alternate" type="text/html"/>
<updated>2019-08-11T00:00:00Z</updated>
<summary/>
<published>2017-12-12T00:00:00Z</published>
<content># CSS 笔记
css/html5/js 兼容表
http://caniuse.com/

# priority

	style &gt; id &gt; hover(鼠标悬停) &gt; class &gt; tag
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 的索引</title>
<link href="/b/db/postgre-index" rel="alternate" type="text/html"/>
<updated>2019-08-11T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre Index
本文主要围绕postgre 总结一下索引, 参考：[PostgreSQL 9种索引的原理和应用场景](https://yq.aliyun.com/articles/11</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Vsc for python</title>
<link href="/b/vsc/vsc-python" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Vsc for python
https://code.visualstudio.com/docs/python/python-tutorial

## go to denifition
1. 安</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js-time</title>
<link href="/b/ria/js-time" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Date Format
&gt; https://zh.wikipedia.org/wiki/ISO_8601

The only format in the spec is a simplified </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js notes</title>
<link href="/b/ria/js-obj" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-08-04T00:00:00Z</published>
<content># Object

## isEempty
    ECMA 7+:
    Object.entries(obj).length === 0 &amp;&amp; obj.constructor === Objec</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Event</title>
<link href="/b/ria/js-dom-event" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Event

## DOM MutationObserver
http://javascript.ruanyifeng.com/dom/mutationobserver.html

### DOM</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Js Array 整理</title>
<link href="/b/ria/js-array" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Js Array 整理
array 不像string 是primitive value, 所以length 可以缩短放大array。

	arr = [1,2,3]
	arr.length = 1</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Promise</title>
<link href="/b/ria/js-promise" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 递归promise
Promise 是递归的，Reject 不是

    const onResolved = e =&gt; console.log('resolve , ', e );
    c</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>try-catch</title>
<link href="/b/ria/js-debug-exception" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># try-catch
## throw any type
    throw "string"
    throw {message:"msg"}
    e = Error('msg')
    </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go str</title>
<link href="/b/go/go-str-serial" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-05-06T00:00:00Z</published>
<content># go json

## encode marshal bytes

    import "encoding/json"
    type response2 struct {
        P</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang fmt</title>
<link href="/b/go/6.go-fmt" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># fmt

- fmt.Println : space, with newline
- fmt.Print : without newline
- fmt.Printf : format

prin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习下Golang 的反射</title>
<link href="/b/go/17.go-reflect" rel="alternate" type="text/html"/>
<updated>2019-08-04T00:00:00Z</updated>
<summary/>
<published>2019-01-07T00:00:00Z</published>
<content># Relection json
    import "github.com/mitchellh/mapstructure"
	err := mapstructure.Decode(input, &amp;</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang func</title>
<link href="/b/go/16.go-func" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># define func
1. 不支持嵌套nested, 重载overload 和 
2. 不支持默认参数default parameter
3. 支持不定长变参数
4. 多返回值
5. 支持命名返</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang pkg的使用</title>
<link href="/b/go/2.go-pkg" rel="alternate" type="text/html"/>
<updated>2019-07-24T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># 结构
1. 参考How to Write Go Code https://golang.org/doc/code.html

2. 环境变量$ go env

## workspace
可以有多个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-datatype</title>
<link href="/b/db/mysql-var" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Data Type(数据类型)

	NULL means you do not have to provide a value for the field... default to null
	</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-time</title>
<link href="/b/db/mysql-time" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Time Type
精确到微秒

    TIME(6), DATETIME(6), TIMESTAMP(6)

# Format Convert Time

## select now(),sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Result

    | id | status |
    +----+--------+
    |  1 | A      |
    update test5 set status = </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 重定向
标准输入输出:

    /dev/stdin -&gt; /dev/fd/0
    /dev/stdout </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># shell 表达式

# Loop

## for

	for a in "$*" ; do echo "$a "; done
	for a in "$@" ; do echo "$a "; do</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 编程</title>
<link href="/b/c/shell-" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2014-03-05T00:00:00Z</published>
<content># Shell Programming
Shell 编程笔记

# Signal, 信号(trap)
Refer to:
http://billie66.github.io/TLCL/book/zh/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>expect 键盘模拟</title>
<link href="/b/c/ops-expect" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Preface
Expect 是Tcl/Tk 语言最有名的扩展，可通过[tcl/tk](/p/linux-tcl) 了解tcl/tk 的用法

&gt; 注意：spawn 结束后，一定要加上`inter</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>学习 docker</title>
<link href="/b/arch/arch-docker" rel="alternate" type="text/html"/>
<updated>2019-08-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 什么是Docker
虚拟机是对硬件的虚拟化(需要Hypervisor这个软件层), 而docker （LXC, linux container）是对操作系统的虚拟化。
1. docker 基于li</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>html5</title>
<link href="/b/ria/js-dom-html5" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2019-07-19T00:00:00Z</published>
<content># Tag

## Forms
属性

    enctype="multipart/form-data"
        default content-type: application/x-ww</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre 安装\配置\管理</title>
<link href="/b/db/postgre-ddl-install" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre 安装\配置\管理
    rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre User and Authentication</title>
<link href="/b/db/postgre-admin-user" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># help
    \h alter
    ALTER ROLE name RENAME TO new_name

# Postgre User and Authentication
    ps</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>FUNCTION</title>
<link href="/b/db/postgre-ddl" rel="alternate" type="text/html"/>
<updated>2019-07-19T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># shell

## connect shell
默认同时支持 unix domain socket + ip/port net socket

    psql DBNAME USERNAME
 </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql-time</title>
<link href="/b/db/mysql-time" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Time Type
精确到微秒

    TIME(6), DATETIME(6), TIMESTAMP(6)

# Format Convert Time

## select now(),sy</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mysql 查询</title>
<link href="/b/db/mysql-ddl-crud" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2019-07-18T00:00:00Z</published>
<content># Result

    | id | status |
    +----+--------+
    |  1 | A      |
    update test5 set status = </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2019-07-18T00:00:00Z</updated>
<summary/>
<published>2019-07-18T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry></feed>