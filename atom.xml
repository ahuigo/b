<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的网络日志</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2021-04-02T09:03:10Z</updated>
<subtitle>ahuigo's Blog</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 标准管道输入输出

	#with stdout(cmd get double stdout); stdout pi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell IO及文件操作</title>
<link href="/b/c/shell-io-file" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Shell IO及文件操作

# file

## hexdump
	hexdump file

## od
od 支持更丰富的格式化输出

	od -tx1 -tc -Ax file

	-t </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-os</title>
<link href="/b/py/py-os" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# os 
## platform

    from sys import platform
	if platform == 'Darwin':  # 如果是Mac OS X
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac user manager</title>
<link href="/b/mac/mac-user" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Preface
mac下没有adduser, 那如何在mac中添加用户/组?

# rename home directory
https://support.apple.com/en-us/HT</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tool</title>
<link href="/b/c/ops-user" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># tool
last #显示最后登录者
who #显示当前登录者
w：谁登录进来了
id：用户/组身份信息

# su

    su -c 'whoami' - root
    /bin/su </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

vim 下的光标移动

    按字符移动 hjkl
    按单词移动 
        小单词:</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2021-03-30T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang 的结构体</title>
<link href="/b/go/go-struct" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2019-03-24T00:00:00Z</published>
<content># 定义
## init 
init 时必须包含全部字段

     n0 := Node{0,1,nil,nil}
     n0 := Node{0,1,nil,nil,}
     n0 := </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议SYN</title>
<link href="/b/net/net-tcpip-syn" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2015-11-11T00:00:00Z</published>
<content># SYN
https://cjting.me/2019/08/28/tcp-queue/</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcpdump</title>
<link href="/b/net/net-tcpdump" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2021-03-25T00:00:00Z</published>
<content># tcpdump
example: https://www.rationallyparanoid.com/articles/tcpdump.html
book:

学术的说，tcpdump是一种嗅探</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines</title>
<link href="/b/go/go-routines" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># go routines
A goroutine is a `lightweight thread` managed by the Go runtime.

execution of f happe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go routines 与原子</title>
<link href="/b/go/go-lock-string" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2020-07-18T00:00:00Z</published>
<content># golang 原子问题

## 问题发现的过程
字节的同学在[踩坑记： Go 服务灵异 panic](v2ex.com/t/691145)提到，json 序列化字符串经常遇到 nil addres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang：Array and slice</title>
<link href="/b/go/go-array-slice" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># array vs slice
1. An array has fixed size, `[N]T`
2. a slice is a dynamically-sized. `[]T` 
3. sli</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Postgre CRUD</title>
<link href="/b/db/pg-crud" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Postgre meta
## string or keyword
    select 'string';
    select "count"(1) from "table_name"

##</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>压测工具</title>
<link href="/b/c/ops-benchmark" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2021-03-25T00:00:00Z</published>
<content># Preface
性能/压力测试的分类：

	基准/基线测试 base line testing / benchmark testing
	负载测试 load testing
	压力测试 stres</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-argv</title>
<link href="/b/py/py-argv" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- click
click 之于argparse/argv, 相当于requests 之于urllib

命令行程序开发

	asciimatics：跨平台，全屏终端包（即鼠标/键</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go汇编示例</title>
<link href="/b/go/go-asm" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2019-01-23T00:00:00Z</published>
<content># doc
发现一份汇编示例：
1. Go Assembly 示例 https://colobu.com/goasm/
2. 英文版：https://www.davidwong.fr/goasm/

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang string</title>
<link href="/b/go/go-str" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># rune vs byte

    type byte uint8
    type rune int32 //'a','中'

    // is slice of read only byte</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 时间函数的用法笔记</title>
<link href="/b/py/py-time" rel="alternate" type="text/html"/>
<updated>2021-03-05T00:00:00Z</updated>
<summary/>
<published>2018-04-02T00:00:00Z</published>
<content># time 工具
time 提供基本的时间，sleep

	import time
	time.time()
		19972314124.05238
        time.localetime(</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-process</title>
<link href="/b/py/py-process" rel="alternate" type="text/html"/>
<updated>2021-03-05T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
## shell
- sh: sh之于subprocess， 相当于requests 对于urllib2
	1. sh.ls("-l", "/tmp", color="never"</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 的math 语法</title>
<link href="/b/py/math/py-math" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2021-03-16T00:00:00Z</published>
<content># number

    0x61
    0o77
    0b11

## random
`[0,1)` 小数

	import random
    random.random()

包含`[</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>golang 的file api</title>
<link href="/b/go/go-file" rel="alternate" type="text/html"/>
<updated>2021-03-25T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Directory Api

## pathinfo
extinfo 

    import "path/filepath"
    fileext :=copy filepath.Ext(fi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>用js proxies 继承别的对象</title>
<link href="/b/ria/js-obj-proxies" rel="alternate" type="text/html"/>
<updated>2021-02-28T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># object set/get

## obj set 

    var person = {
        firstName: "John",
        lastName : "Doe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-func</title>
<link href="/b/py/py-func" rel="alternate" type="text/html"/>
<updated>2021-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

函数式编程

# call func
getattr(foo, 'bar')()
locals()['bar']()
globals()['bar']()

## exec fu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>搭建 git server</title>
<link href="/b/git/git-server" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># 搭建 git server
方案参考:
0. git-scm 教程
1. 廖老师的文章在本地建一个git server http://www.liaoxuefeng.com/wiki/001373</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 变量的数据类型</title>
<link href="/b/c/shell-var" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Shell 变量的数据类型
shell 主要支持字符串 和 数组 两种数据类型。数组功能很弱，如果想做复杂的处理，建议用python 等脚本处理。

## 变量定义与删除

    VAR='he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 文件管理</title>
<link href="/b/c/ops-file" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2021-03-16T00:00:00Z</published>
<content># Preface
本该讲述的是与shell 相关的 Linux文件管理

# ls

	ll -S 按文件大小排序
	ll -i 查看文件的inode

# find

	find [-H | -L</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Go Signal</title>
<link href="/b/go/go-ipc-signal" rel="alternate" type="text/html"/>
<updated>2021-02-05T00:00:00Z</updated>
<summary/>
<published>2019-09-21T00:00:00Z</published>
<content># Go Signal

查看信号

    $ man signal
    No    Name         Default Action       Description
    2   </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ops-process-ps</title>
<link href="/b/c/ops-process-ps" rel="alternate" type="text/html"/>
<updated>2021-03-16T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface

# processe status
linux上进程有5种状态:

1. 运行(正在运行或在运行队列中等待)
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)
3</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 终端、作业与守护进程</title>
<link href="/b/c/c-terminal" rel="alternate" type="text/html"/>
<updated>2021-02-05T00:00:00Z</updated>
<summary/>
<published>2021-02-05T00:00:00Z</published>
<content># Unix 下的终端、作业、守护进程
用户通过终端登录系统后得到一个shell 进程， 这个终端成为shell 进程的控制终端（Controlling Terminal）. [/c/ops-proc</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>JS Math</title>
<link href="/b/ria/js-math" rel="alternate" type="text/html"/>
<updated>2021-01-27T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Math

	E	返回算术常量 e，即自然对数的底数（约等于2.718）。
	LN2	返回 2 的自然对数（约等于0.693）。
	LN10	返回 10 的自然对数（约等于2.302）。
	LOG</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell 工具集合</title>
<link href="/b/c/shell-tool" rel="alternate" type="text/html"/>
<updated>2021-01-23T00:00:00Z</updated>
<summary/>
<published>2016-09-27T00:00:00Z</published>
<content># System debug, 系统调试工具

- web: 对于 Web 调试，curl 和 curl -I 很方便灵活，或者也可以使用它们的同行 wget，或者更现代的 httpie。
- dis</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2021-01-23T00:00:00Z</updated>
<summary/>
<published>2021-01-23T00:00:00Z</published>
<content># shell 表达式

# Loop

    for i in `seq 1 5`;
    for i in {1..5};

## loop break

    for i in `seq </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>全屏</title>
<link href="/b/c/ops-virtualbox" rel="alternate" type="text/html"/>
<updated>2021-01-23T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># install win10
## 提示“Units specified don't exist. SHSUCDX can't install.”
错误原因:虚拟光驱被分配在SATA控制器下面。

</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux os</title>
<link href="/b/c/linux-os" rel="alternate" type="text/html"/>
<updated>2021-01-23T00:00:00Z</updated>
<summary/>
<published>2019-06-15T00:00:00Z</published>
<content># Check os Version

CISC 复杂指令集

    X86架构: intel/amd/via
        i386: 或称IA-32 
        amd64: AMD64</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js dom file</title>
<link href="/b/ria/js-dom-file" rel="alternate" type="text/html"/>
<updated>2020-10-16T00:00:00Z</updated>
<summary/>
<published>2020-10-16T00:00:00Z</published>
<content># Focus

    var isFocused = (document.activeElement === dummyEl);
    ele.focus()

# FormData

## i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>ajax cors</title>
<link href="/b/ria/js-ajax-cors" rel="alternate" type="text/html"/>
<updated>2020-10-16T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># ajax cors

## 请求分类
浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。
只要同时满足以下两大条件，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-http</title>
<link href="/b/py/py-http" rel="alternate" type="text/html"/>
<updated>2021-03-05T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

# urllib
urllib2 is deprecated, use requests instead , except: `urllib.parse.urlsplit/url</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug-log</title>
<link href="/b/py/py-debug-log" rel="alternate" type="text/html"/>
<updated>2020-10-14T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
- logging
https://docs.python.org/3.4/howto/logging.html

## example

    import logging
 </content>
</entry></feed>